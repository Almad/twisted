#!/usr/bin/env python

"""
Usage: mkwebserver [options]
        -u, --user
                Makes a server with ~/public_html and
                ~/.twistd-web-service support for users.

            --personal
                Instead of generating a webserver, generate a
                ResourcePublisher which listens on ~/.twistd-web-service

        -m, --module <modulename:classname>
                modulename is a python module without the .py extension.
                This module does not have to be in the PATH or even
                PYTHONPATH. classname is the name of the class inside
                the module that you want to be the root of the web
                server.
        -s, --static <path>
                <path> is either a specific file or a directory to be
                set as the root of the web server. Use this if you
                have a directory full of HTML, cgi, or php3 files or
                any other files that you want to be served up raw.

        -p, --port <port>
                <port> is a number representing which port you want to
                start the server on.

        -t, --telnet <port>
                Run a telnet server on <port>, for additional
                configuration later.

        -i, --index <name>
                Use an index name other than "index.html"

This creates a web.spl file that can be used by twistd.  If you
specify no arguments, it will be a demo webserver that has the Test
class from twisted.web in it.
"""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys,os,string

if string.find(os.path.abspath(sys.argv[0]),'Twisted') != -1:
    sys.path.append(os.path.dirname(
        os.path.dirname(os.path.abspath(sys.argv[0])))) 
### end of preamble

# Twisted Imports
from twisted.web import server, static, twcgi, script, test, distrib
from twisted.internet import main, tcp
from twisted.python import usage
from twisted.spread import pb

import sys

app = main.Application("web")

class MyOptions(usage.Options):
    optStrings = [["port", "p", "8080"],
                  ["index","i", "index.html"]]
    optFlags = [["personal", ""]]
    def opt_module(self, identifier):
        modulename, classname = string.split(identifier, ':')
        modulename = os.path.abspath(modulename)
        directory, filename = os.path.split(modulename)

        sys.path.append(directory)
        module = __import__(filename)
        classobj = getattr(module, classname)
        self.root = classobj()

    opt_m = opt_module

    def opt_help(self):
        print __doc__
        sys.exit(0)

    def opt_user(self):
        self.root = distrib.UserDirectory()

    opt_u = opt_user

    def opt_static(self, path):
        self.root = static.File(path)
        self.root.processors = {
            '.cgi': twcgi.CGIScript,
            '.php3': twcgi.PHPScript,
            '.epy': script.PythonScript
            }

    opt_s = opt_static

    def opt_telnet(self, port):
        from twisted.protocols import telnet
        factory = telnet.ShellFactory()
        port = tcp.Port(int(port))
        port.protocol = factory.protocol
        app.addPort(port)

    opt_t = opt_telnet


try:
    config = MyOptions()
    config.parseOptions()
except usage.error, ue:
    print __doc__
    print "%s: %s" % (sys.argv[0], ue)
    os._exit(1)
    

try:
    root = config.root
    config.root.indexName = config.index
except AttributeError:
    # This really ought to be web.Admin or something
    root = test.Test()

site = server.Site(root)

if config.personal:
    import pwd,os

    pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell \
             = pwd.getpwuid(os.getuid())

    service = distrib.ResourcePublisher(site)
    factory = pb.BrokerFactory()
    factory.addService("web", service)
    port = tcp.Port(os.path.join(pw_dir,
                                 distrib.UserDirectory.userSocketName),
                    factory)
else:
    port = tcp.Port(int(config.port), site)
    
app.addPort(port)

from cPickle import dump
dump(app,
     open('web.spl','wb'),1)

