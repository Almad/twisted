#!/usr/bin/env python

"""
Usage: twistd [options]
Options:
     -t --threaded    use threads
     -n --nodaemon    don't daemonize
     -p --profile     run profiler
     -l --logfile     log to a specified file, - for stdout
                        (default twistd.log)
        --pidfile     use a pidfile
                        (default twistd.pid)
     -r --rundir      change to a supplied directory before running
                        (default .)
     -f --file        read the given .spl file
                        (default twistd.spl)
     
This reads an twisted.internet.main.Application out of a file and runs it.
"""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys,os,string

if string.find(os.path.abspath(sys.argv[0]),'Twisted') != -1:
    sys.path.append(os.path.dirname(
        os.path.dirname(os.path.abspath(sys.argv[0])))) 
### end of preamble

import traceback
from twisted.python import usage, threadable, log

class ServerOptions(usage.Options):
    optFlags = [['nodaemon','n'],
                ['profile','p'],
                ['threaded','t']]
    optStrings = [['logfile','l','twistd.log'],
                  ['file','f','twistd.spl'],
                  ['pidfile','','twistd.pid'],
                  ['rundir','d','.']]

try:
    config = ServerOptions()
    config.parseOptions()
except usage.error, ue:
    print __doc__
    print "%s: %s" % (sys.argv[0], ue)
    os._exit(1)

os.chdir(config.rundir)
sys.path.append(config.rundir)
threadable.init(config.threaded)

if os.path.exists(config.pidfile):
    try:
        pid = int(open(config.pidfile).read())
    except ValueError:
        sys.exit('Pidfile %s contains non numeric value' % config.pidfile)

    try:
        os.kill(pid, 0)
    except OSError:
        # The pid doesnt exists.
        print 'Removing stale pidfile %s' % config.pidfile
        os.remove(config.pidfile)
    else:
        sys.exit('A server is already running, PID %s' % open(config.pidfile).read())

if config.logfile == '-':
    if not config.nodaemon:
        os._exit(1)
    logFile = sys.stdout
else:
    logFile = open(config.logfile,'ab+')

oldstdin = sys.stdin
oldstdout = sys.stdout
oldstderr = sys.stderr
log.startLogging(logFile)
# Load the servers.
from cPickle import load
print "Loading %s..." % config.file
sys.stdout.flush()
application = load(open(config.file,'rb'))
print "Loaded."


if not config.nodaemon:
    # Turn into a daemon.
    if os.fork():   # launch child and...
        os._exit(0) # kill off parent
    os.setsid()
    os.umask(0)
    oldstdin.close()
    oldstdout.close()
    oldstderr.close()
    
open(config.pidfile,'wb').write(str(os.getpid()))
try:
    if config.profile:
        import profile
        profile.run("application.run()")
    else:
        application.run()
except:
    traceback.print_exc(file=oldstdout)
    oldstdout.flush()
os.unlink(config.pidfile)
print "Server Shut Down."
