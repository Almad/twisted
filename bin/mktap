#!/usr/bin/env python

"""
Usage::

  mktap *apptype* *application_options*
  mktap --help *apptype*

So far *apptype* can be 'web', 'irc', 'reality', 'toc', 'mail' and 'telnet'

"""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys,os,string

if string.find(os.path.abspath(sys.argv[0]),'Twisted') != -1:
    sys.path.append(os.path.dirname(
        os.path.dirname(os.path.abspath(sys.argv[0]))))
sys.path.append('.')
### end of preamble

from twisted.protocols import telnet
from twisted.internet import main,tcp
from twisted.python import usage
import sys, traceback, os

class GeneralOptions(usage.Options):
    optFlags = [['help', 'h']]
    optStrings = [['uid', 'u', os.getuid()], ['gid', 'g', os.getgid()]]

    def parseArgs(self, *args):
        self.args = args

def getModule(type):
    try:
        mod = __import__("twisted.tap.%s" % type, globals(), locals(), type)
        return mod
    except ImportError:
        traceback.print_exc()
        print "Please select one of: telnet words reality web toc."
        sys.exit()

options = GeneralOptions()
try:
    options.parseOptions(sys.argv[1:])
except:
    print __doc__
    sys.exit()

if options.help:
    if options.args:
        mod = getModule(options.args[0])
        print mod.usage_message
        sys.exit()
    else: 
        print __doc__
	sys.exit()
else: 
    mod = getModule(options.args[0])
try:
    config = mod.Options()
    config.parseOptions(options.args[1:])
except usage.error, ue:
    print mod.usage_message
    print "Usage Error: %s" % ue
    sys.exit()

a = main.Application(options.args[0], int(options.uid), int(options.gid))
for num, proto in mod.getPorts(a, config):
    a.listenOn(num, proto)
a.save()

