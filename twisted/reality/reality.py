
"""Twisted Reality ][

This is the simulation core of a single OR multi player text-based game.
"""

# System Imports
from copy import copy
import string

# Twisted Imports
from twisted.python import reflect, reference, delay

class Reality(delay.Delayed,reference.Resolver):
    def __init__(self):
        delay.Delayed.__init__(self)
        reference.Resolver.__init__(self,self)
        self.__counter = 0
        self.__ids = {}
        self.__names = {}


    def reload(self, module):
        reload(module)
        for thing in self.__ids.values():
            reflect.refrump(thing)


    def getThingById(self, thingid):
        return self.__ids[thingid]


    def _addThing(self,thing):
        self.__counter = self.__counter+1
        thing.thing_id = self.__counter
        idname = string.lower(thing.name)
        assert not self.__ids.has_key(thing.thing_id),\
               "Internal consistency check failure."\
               "I don't know what's going on."
        assert not self.__names.has_key(idname),\
               "Invalid name '%s'.  You must choose one that's "\
               "not yet in use in this Reality." % idname
        self.__ids[thing.thing_id] = thing
        self.__names[idname] = thing
        self.changed = 1


    def _removeThing(self,thing):
        if self.__ids.get(thing.thing_id) is thing:
            del self.__ids[thing.thing_id]
        else:
            print "WARNING:",thing," ID CANNOT BE REMOVED FROM",self
        lname = string.lower(thing.name)
        if self.__names.get(lname) is thing:
            del self.__names[lname]
        else:
            print "WARNING:",thing," NAME CANNOT BE REMOVED FROM",self
        self.changed = 1


    def unplaced(self):
        return filter(lambda x: not x.location, self.__ids.values())


    def _updateName(self,thing,oldname,newname):
        assert (not oldname) or self.__names[string.lower(oldname)] is thing , 'Bad mojo.'
        if oldname:
            del self.__names[string.lower(oldname)]
        self.__names[string.lower(newname)]=thing


    def __getitem__(self,name):
        return self.__names[string.lower(name)]

    def get(self, name,defarg = None):
        return self.__names.get(string.lower(name),defarg)


    def objects(self):
        return self.__ids.values()


    def resolveAll(self):
        self.resolve(self.objects())

    def thingFromLogin(self, playerName):
        return self[playerName].login()

    def printSource(self,write):
        "Create a source representation of the map"
        self.sourcemods={}

        write("""
#
# This file was auto-generated by Twisted Reality.
#

from twisted.python import reference
from twisted.reality import thing
from twisted.reality import reality
t=reference.Reference
m=reference.AttributeReference
result = thing._default = reality.Reality()

""")
        oo = self.objects()
        oo.sort(lambda x, y: cmp(string.lower(x.name),
                                 string.lower(y.name)))

        for o in oo:
            o.printSource(write)
            write("\n\n")

        write("del thing._default\n")
        del self.sourcemods

# this for the 'get rid of known bad refs' hack...
#from twisted import ui
