<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE XHTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Twisted.Web2 Object Traversal</title>
  </head>
  <body>

    <h1>Twisted.Web2 Object Traversal</h1>

    <p><em>Object traversal</em> is the process Twisted.Web2 uses to
      determine what object to use to render HTML for a particular
      URL. When an HTTP request comes in to the web server, the object
      publisher splits the URL into segments, and repeatedly calls

      methods which consume path segments and return objects which represent that
      path, until all segments have been consumed. At the core, the Web2 traversal
      API is very simple. However, it provides some higher level functionality layered
      on top of this to satisfy common use cases.</p>

    <h2>Object Traversal Basics</h2>

    <p>The <em>root resource</em> is the top-level object in the URL
      space; it conceptually represents the URI &quot;/&quot;. The
      Twisted.Web2 <em>object traversal</em> and <em>object
      publishing</em> machinery uses only two methods to locate an
      object suitable for publishing and to generate the HTML from it;
      these methods are described in the
      interface <code class="API">twisted.web2.iweb.IResource</code>:</p>

    <pre class="python">
class IResource(Interface):
  """
  I am a web resource.
  """

  def locateChild(self, request, segments):
    """Locate another object which can be adapted to IResource.

    &#64;return: A 2-tuple of (resource, remaining-path-segments),
                 or a deferred which will fire the above.
    
                 Causes the object publishing machinery to continue on
                 with specified resource and segments, calling the
                 appropriate method on the specified resource.

                 If you return (self, L{server.StopTraversal}), this
                 instructs web2 to immediately stop the lookup stage,
                 and switch to the rendering stage, leaving the
                 remaining path alone for your render function to
                 handle.
    """

  def renderHTTP(self, request):
    """Return an IResponse or a deferred which will fire an
    IResponse. This response will be written to the web browser
    which initiated the request.
    """

    </pre>

    <p>Let's examine what happens when object traversal occurs over a
      very simple root resource:</p>

    <pre class="python">
from twisted.web2 import iweb, http, stream

class SimpleRoot(object):
    implements(iweb.IResource)

    def locateChild(self, request, segments):
        return self, ()

    def renderHTTP(self, request):
        return http.Response(200, stream=stream.MemoryStream("Hello, world!"))
  
    </pre>

    <p>This resource, when passed as the root resource to
      <code class="API" base="twisted.web2">server.Site</code> or
      <code class="API"
            base="twisted.web2">wsgi.createWSGIApplication</code>, will
      immediately return itself, consuming all path segments. This
      means that for every URI a user visits on a web server which
      is serving this root resource, the text &quot;Hello,
      world!&quot; will be rendered. Let's examine the value of
      <code class="python">segments</code> for various values of
      URI:</p>

    <pre>
/foo/bar
  ('foo', 'bar')

/
  ('', )

/foo/bar/baz.html
  ('foo', 'bar', 'baz.html')

/foo/bar/directory/
  ('foo', 'bar', 'directory', '')
    </pre>

    <p>So we see that Web2 does nothing more than split the URI on the
      string '/' and pass these path segments to our application for
      consumption. Armed with these two methods alone, we already have
      enough information to write applications which service any form
      of URL imaginable in any way we wish. However, there are some
      common URL handling patterns which Twisted.Web2 provides higher
      level support for.</p>

    <h2>locateChild in depth</h2>

    <p>One common URL handling pattern involves parents which only
      know about their direct children. For example,
      a <code class="python">Directory</code> object may only
      know about the contents of a single directory, but if it
      contains other directories, it does not know about the contents
      of them. Let's examine a
      simple <code class="python">Directory</code> object which
      can provide directory listings and serves up objects for child
      directories and files:</p>

    <pre class="python">
from twisted.web2 import resource

class Directory(resource.Resource):
    def __init__(self, directory):
        self.directory = directory
    
    def renderHTTP(self, request):
        html = ['&lt;ul&gt;']
        for child in os.listdir(self.directory):
            fullpath = os.path.join(self.directory, child)
            if os.path.isdir(fullpath):
                child += '/'
            html.extend(['&lt;li&gt;&lt;a href="', child, '"&gt;', child, '&lt;/a&gt;&lt;/li&gt;'])
            
        html.append('&lt;/ul&gt;')
        html = stream.MemoryStream(''.join(html))
        return http.Response(200, stream=html)

    def locateChild(self, request, segments):
        name = segments[0]
        fullpath = os.path.join(self.directory, name)
        if not os.path.exists(fullpath):
            return None, () # 404

        if os.path.isdir(fullpath):
            return Directory(fullpath), segments[1:]
        if os.path.isfile(fullpath):
            return static.File(fullpath), segments[1:]
  
    </pre>

    <p>Because this implementation of <code class="python">locateChild</code>
      only consumed one segment and returned the rest of them
      (<code class="python">segments[1:]</code>),
      the object traversal process will continue
      by calling <code class="python">locateChild</code>
      on the returned resource and passing the partially-consumed
      segments. In this way, a directory structure of any depth can be
      traversed, and directory listings or file contents can be rendered for any
      existing directories and files.</p> 
   
    <p>So, let us examine what happens when the URI 
      &quot;/foo/bar/baz.html&quot; is traversed, where
      &quot;foo&quot; and &quot;bar&quot; are directories, and
      &quot;baz.html&quot; is a file.</p>

    <ol>
      <li>Directory('/').locateChild(request, ('foo', 'bar',
      'baz.html')) - Returns Directory('/foo'), ('bar', 'baz.html')</li>
      <li>Directory('/foo').locateChild(request, ('bar', 'baz.html'))
      - Returns Directory('/foo/bar'), ('baz.html, )</li>
      <li>Directory('/foo/bar').locateChild(request, ('baz.html')) - 
      Returns File('/foo/bar/baz.html'), ()</li>
    </ol>

    <p>No more segments to be
      consumed; <code
      class="python">File('/foo/bar/baz.html').renderHTTP(ctx)</code> is
      called, and the result is sent to the browser.</p>

    <h2>childFactory method</h2>

    <p>Consuming one URI segment at a time by checking to see if a
      requested resource exists and returning a new object is a very
      common pattern. Web2's default implementation
      of <code
      class="API">twisted.web2.iweb.IResource</code>, <code
      class="API">twisted.web2.resource.Resource</code>, contains an
      implementation of <code class="python">locateChild</code> which
      provides more convenient hooks for implementing object
      traversal. One of these hooks
      is <code class="python">childFactory</code>. Let us imagine for
      the sake of example that we wished to render a tree of
      dictionaries. Our data structure might look something like this:</p>

    <pre class="python">
tree = dict(
    one=dict(
        foo=None,
        bar=None),
    two=dict(
        baz=dict(
        quux=None)))

    </pre>

    <p>Given this data structure, the valid URIs would be:</p>
    <ul>
      <li>/</li>
      <li>/one</li>
      <li>/one/foo</li>
      <li>/one/bar</li>
      <li>/two</li>
      <li>/two/baz</li>
      <li>/two/baz/quux</li>
    </ul>

    <p>Let us construct
      a <code class="API">twisted.web2.resource.Resource</code>
      subclass which uses the
      default <code class="python">locateChild</code> implementation
      and overrides the <code class="python">childFactory</code> hook
      instead:</p> 

    <pre class="python">
from twisted.web2 import http, resource, stream

class DictTree(resource.Resource):
    def __init__(self, dataDict):
        self.dataDict = dataDict

    def renderHTTP(self, request):
        if self.dataDict is None:
            content = "Leaf"
        else:
            html = ['&lt;ul&gt;']
            for key in self.dataDict.keys():
                html.extend(['&lt;li&gt;&lt;a href="', key, '"&gt;', key, '&lt;/a&gt;&lt;/li&gt;'])
            html.append('&lt;/ul&gt;')
            content = ''.join(html)

        return http.Response(200, stream=stream.MemoryStream(content))

    def childFactory(self, request, name):
        if name not in self.dataDict:
            return None # 404
        return DictTree(self.dataDict[name])

    </pre>

    <p>As you can see, the <code class="python">childFactory</code>
    implementation is considerably shorter than the equivalent <code class="python">locateChild</code> implementation would have been.</p>

    <h2>child_* methods and attributes</h2>

    <p>Often we may wish to have some hardcoded URLs which are not
      dynamically generated based on some data structure. For example,
      we might have an application which uses an external CSS
      stylesheet, an external JavaScript file, and a folder full of
      images. The <code
      class="API">twisted.web2.resource.Resource</code> <code
      class="python">locateChild</code> implementation provides a
      convenient way for us to express these relationships by using
      <code class="python">child_</code> prefixed methods:</p>

    <pre class="python">
from twisted.web2 import resource, http, static

class Linker(resource.Resource):
    def renderHTTP(self, request):
        page = """&lt;html&gt;
    &lt;head&gt;
      &lt;link href="css" rel="stylesheet" /&gt;
      &lt;script type="text/javascript" src="scripts" /&gt;
    &lt;body&gt;
      &lt;img src="images/logo.png" /&gt;
    &lt;/body&gt;
  &lt;/html&gt;"""

        return http.Response(200, stream=stream.MemoryStream(page))

    def child_css(self, request):
        return static.File('/Users/dp/styles.css')

    def child_scripts(self, request):
        return static.File('/Users/dp/scripts.js')

    def child_images(self, request):
        return static.File('/Users/dp/images/')

    </pre>

    <p>One thing you may have noticed is that all of the examples so
      far have returned new object instances whenever they were
      implementing a traversal API. However, there is no reason these
      instances cannot be shared. One could for example return a
      global resource instance, an instance which was previously
      inserted in a dict, or lazily create and cache dynamic resource
      instances on the fly. The <code class="API"
      base="twisted.web2">resource.Resource</code> <code
      class="python">locateChild</code> implementation also provides a
      convenient way to express that one global resource instance
      should always be used for a particular url,
      the <code class="python">child</code>-prefixed attribute:</p>


    <pre class="python">
class FasterLinker(Linker):
    child_css = static.File('/Users/dp/styles.css')
    child_scripts = static.File('/Users/dp/scripts.js')
    child_images = static.File('/Users/dp/images/')

    </pre>

    <h2>Dots in child names</h2>

    <p>When a URL contains dots, which is quite common in normal URLs,
      it is simple enough to handle these URL segments
      in <code class="python">locateChild</code>
      or <code class="python">childFactory</code> one of the passed
      segments will simply be a string containing a dot. However, it
      is notimmediately obvious how one would express a URL segment
      with a dot in it when
      using <code class="python">child</code>-prefixed methods. The
      solution is really quite simple:</p>

    <pre class="literal-block">
class DotChildren(resource.Resource):
    return '<html><head><script type="text/javascript" src="scripts.js" /></head></html>'

setattr(DotChildren, 'child_scripts.js', static.File('/Users/dp/scripts.js'))

    </pre>

    <p>The same technique could be used to install a child method with
      a dot in the name.</p>

    <h2>The default trailing slash handler</h2>

    <p>When a URI which is being handled ends in a slash, such as when
      the '/' URI is being rendered or when a directory-like URI is
      being rendered, the string '' appears in the path segments which
      will be traversed. Again, handling this case is trivial inside
      either <code class="python">locateChild</code>
      or <code class="python">childFactory</code>, but it may not be
      immediately obvious
      what <code class="python">child</code>-prefixed method or
      attribute will be looked up. The method or attribute name which
      will be used is simply <code class="python">child</code> with a
      single trailing underscore.</p> 

    <p>The <code class="API"
                 base="twisted.web2">resource.Resource</code> class
      provides an implementation of this method which can work in two
      different ways. If the
      attribute <code class="python">addSlash</code> is True, the
      default trailing slash handler will
      return <code class="python">self</code>. In the case
      when <code class="python">addSlash</code> is True, the
      default <code class="python">resource.Resource.renderHTTP</code>
      implementation will simply perform a redirect which
      adds the missing slash to the URL.</p>

    <p>The default trailing slash handler also returns self
      if <code class="python">addSlash</code> is false, but emits a
      warning as it does so. This warning may become an exception at
      some point in the future.</p>

    <h2>IRequest.prepath and IRequest.postpath</h2>

    <p>During object traversal, it may be useful to discover which
      segments have already been handled and which segments are
      remaining to be handled.  In locateChild the remaining segments
      are given as the second argument.  However, since all object
      traversal APIs are also passed
      the <code class="python">request</code> object, this information
      can also be obtained via
      the <code class="API" base="twisted.web2.iweb">IRequest.prepath</code>
      and <code class="API" base="twisted.web2.iweb">IRequest.postpath</code>
      attributes.</p>

    <h2>Conclusion</h2>

    <p>Twisted.web2 makes it easy to handle complex URL
      hierarchies. The most basic object traversal
      interface, <code
      class="API">twisted.web2.iweb.IResource.locateChild</code>,
      provides powerful and flexible control over the entire object
      traversal process. Web2's
      canonical <code class="API" base="twisted.web2.iweb">IResource</code>
      implementation, <code class="API"
      base="twisted.web2">resource.Resource</code>, also includes the
      convenience hooks <code class="python">childFactory</code> along
      with <code class="python">child</code>-prefixed method and
      attribute semantics to simplify common use cases.</p>
  </body>
</html>
