<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>The Evolution of Finger: adding features to the finger service</title>
  </head>
<body>

<h1>The Evolution of Finger: adding features to the finger service</h1>

<h2>Introduction</h2>

<p> This is the second part of the Twisted tutorial <a
href="index.xhtml">Twisted from Scratch, or The Evolution of Finger</a>.</p>

<p>In this section of the tutorial, our finger server will continue to sprout
features: the ability for users to set finger announces, and using our finger
service to send those announcements on the web, on IRC and over XML-RPC.</p>

<h2>Setting Message By Local Users</h2>

<p>Now that port 1079 is free, maybe we can use it with a different
server, one which will let people set their messages. It does
no access control, so anyone who can login to the machine can
set any message. We assume this is the desired behavior in
our case. Testing it can be done by simply:
</p>

<pre class="shell">
% nc localhost 1079   # or telnet localhost 1079
moshez
Giving a tutorial now, sorry!
^D
</pre>

<a href="listings/finger/finger12.tac" class="py-listing">finger12.tac</a>

<p>This program has two protocol-factory-TCPServer pairs, which are both child 
services of the application.  Specifically, the 
<code base="API" class="twisted.application.service.Service">setServiceParent</code> 
method is used to define the two TCPServer services as children of 
<code>application</code>, which implements
<code base="API" class="twisted.application.servce">IServiceCollection</code>. 
Both services are thus started with the application.</p>

<h2>Use Services to Make Dependencies Sane</h2>

<p>The previous version had the setter poke at the innards of the
finger factory. This strategy is usually not a good idea: this version makes
both factories symmetric by making them both look at a single
object. Services are useful for when an object is needed which is
not related to a specific network server. Here, we define a common service 
class with methods that will create factories on the fly. The service 
also contains methods the factories will depend on.</p>

<p>The factory-creation methods, <code>getFingerFactory</code> and 
<code>getFingerSetterFactory</code>, follow this pattern:</p>

<ol>

<li>Instantiate a generic server factory, 
<code>twisted.internet.protocol.ServerFactory</code>.</li>

<li>Set the protocol class, just like our factory class would have.</li>

<li>Copy a service method to the factory as a function attribute.  The 
function won't have access to the factory's <code>self</code>, but that's OK 
because as a bound method it has access to the service's <code>self</code>, 
which is what it needs.  For <code>getUser</code>, a custom method defined in 
the service gets copied.  For <code>setUser</code>, a standard method of the 
<code>users</code> dictionary is copied.</li>

</ol>

<p>Thus, we stopped subclassing: the service simply puts useful methods and 
attributes inside the factories. We are getting better at protocol design:
none of our protocol classes had to be changed, and neither will have to 
change until the end of the tutorial.</p>

<p>As an application 
<code class="API" base="twisted.application.service">service</code> , this new 
finger service implements the 
<code class="API" base="twisted.application.service">IService</code> interface 
and can be started and stopped in a standardized manner.  We'll make use of 
this in the next example.</p>

<a href="listings/finger/finger13.tac" class="py-listing">finger13.tac</a>



<h2>Read Status File</h2>

<p>This version shows how, instead of just letting users set their
messages, we can read those from a centrally managed file. We cache
results, and every 30 seconds we refresh it. Services are useful
for such scheduled tasks.</p>

<a href="listings/finger/etc.users" class="listing">sample /etc/users file</a>

<a href="listings/finger/finger14.tac" class="py-listing">finger14.tac</a>

<p>Since this verison is reading data from a file (and refreshing the data 
every 30 seconds), there is no <code>FingerSetterFactory</code> and thus 
nothing listening on port 1079.</p>

<p>Here we override the standard 
<code class="API" base="twisted.application.service.Service">startService</code> 
and 
<code class="API" base="twisted.application.service.Service">stopService</code> 
hooks in the Finger service, which is set up as a child service of 
the application in the last line of the code. <code>startService</code> calls 
<code>_read</code>, the function responsible for reading the data; 
<code>reactor.callLater</code> is then used to schedule it to run again after 
thirty seconds every time it is called. <code>reactor.callLater</code> returns 
an object that lets us cancel the scheduled run in <code>stopService</code> 
using its <code>cancel</code> method.</p>

<h2>Announce on Web, Too</h2>

<p>The same kind of service can also produce things useful for
other protocols. For example, in twisted.web, the factory
itself (<code base="API" class="twisted.web.server">Site</code>) is almost 
never subclassed &mdash; instead, it is given a resource, which represents the tree 
of resources available via URLs. That hierarchy is navigated by 
<code base="API" class="twisted.web.server">Site</code>
and overriding it dynamically is possible with 
<code base="API" class="twisted.web.resource.Resource">getChild</code>.</p>

<p>To integrate this into the Finger application (just because we can), we set
up a new TCPServer that calls the <code base="API"
class="twisted.web.server">Site</code> factory and retrieves resources via a
new function of <code>FingerService</code> named <code>getResource</code>.
This function specifically returns a <code base="API"
class="twisted.web.resource">Resource</code> object with an overridden <code
base="API" class="twisted.web.resource.Resource">getChild</code> method.</p>

<a href="listings/finger/finger15.tac" class="py-listing">finger15.tac</a>


<h2>Announce on IRC, Too</h2>

<p>This is the first time there is client code. IRC clients often
act a lot like servers: responding to events from the network.
The reconnecting client factory will make sure that severed links
will get re-established, with intelligent tweaked exponential
back-off algorithms. The IRC client itself is simple: the only
real hack is getting the nickname from the factory in connectionMade.</p>

<a href="listings/finger/finger16.tac" class="py-listing">finger16.tac</a>

<p><code>FingerService</code> now has another new function, 
<code>getIRCbot</code>, which returns the 
<code>ReconnectingClientFactory</code>.  This factory in turn will instantiate 
the <code>IRCReplyBot</code> protocol.  The IRCBot is configured in the last 
line to connect to <code>irc.freenode.org</code> with a nickname of 
<code>fingerbot</code>.</p>

<p>By overriding <code>irc.IRCClient.connectionMade</code>, 
<code>IRCReplyBot</code> can access the <code>nickname</code> attribute of the 
factory that instantiated it.</p>

<h2>Add XML-RPC Support</h2>

<p>In Twisted, XML-RPC support is handled just as though it was
another resource. That resource will still support GET calls normally
through render(), but that is usually left unimplemented. Note
that it is possible to return deferreds from XML-RPC methods.
The client, of course, will not get the answer until the deferred
is triggered.</p>

<a href="listings/finger/finger17.tac" class="py-listing">finger17.tac</a>

<p>Instead of a web browser, we can test the XMLRPC finger using a simple 
client based on Python's built-in <code>xmlrpclib</code>, which will access 
the resource we've made available at <code>localhost/RPC2</code>.</p>

<a href="listings/finger/fingerXRclient.py" class="py-listing">fingerXRclient.py</a>

</body>
</html>
