<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Using Application</title>
</head>

<body>
<h1>Using Application</h1>


<p>There are many ways in which your code will be called by various parts of
the Twisted framework by the time you're done.  The initial one we're going to
focus on here is a plug-in for the <code class="shell">mktap</code> utility.
<code class="shell">mktap</code> produces complete, runnable
<code base="twisted.application.service" class="API">Application</code>
instances, so no additional work is necessary to make your code work with
<code class="shell">twistd</code>.  First we will go through the process of
creating a
plug-in that Twisted can find, then we make it adhere to the <code
class="shell">mktap</code> interface.  Finally we will load that plug-in with a
server.</p>
<h2>Motivation</h2>

<p>Twisted can power anything connected to a network, from your corporate
message-broadcasting network to your desktop IRC client.  This is great for
integrating lots of different tools, but can make it very difficult to
understand how to use the Twisted platform most effectively.</p>

<p>You've probably come to Twisted thinking of it as a library of code to help
you write an application. It is much more useful to think of <em>your
code</em> as the library. Twisted is a framework.  The difference between a
framework and a library is that a developer's code will run a library's
functions; whereas a framework runs the developer's functions.</p>

<p>The difference is subtle, but significant; there are a range of resources
which have to be allocated and managed regarding start-up and shut-down of an
process, such as spawning of threads and handling events. In the library
model, you handle the management of these resources. If you use Twisted as a
framework, though, it will manage these resources itself.</p>

<p>If you were using Twisted as a library, you would probably write a Python
script that:</p>

<ul>
<li>installs the reactor you want (if you're not using the default);</li>
<li>performs initialization &mdash; opens data files, starts
<code>reactor.callLater</code> loops, etc.</li>
<li>calls <code>reactor.run()</code>; and</li>
<li>performs deinitialization.</li>
</ul>

<p>There are two problems with this methodology: it requires a lot of
boiler-plate code; and it introduces inflexibility into the design. The usual
way to solve this kind of problem is to write <em>configuration files</em>,
and it is no different in Twisted.</p>

<p>At this point, the standard thing to do would be to write a long, tedious
and subtly wrong manual describing the configuration language. Rest assured,
like every other project, Twisted has those. But the language is secondary,
and will be described later &mdash; more important are the configuration
<em>objects</em>.</p>

<h2>Services, Persistence and Security, Oh My!</h2>

<p>It is possible to think of any configuration language as designed to build
a configuration object, which is then queried and acted upon by the program
runtime.</p>

<p>
In Twisted, this is literally true internally &mdash; the
master configuration object is
<code>twisted.application.service.Application</code>.
However, there is virtually nothing you can do with this
object directly. This object is <code>Componentized</code> &mdash;
it has different, orthogonal, aspects. You access these aspects
by using <em>interfaces</em>. Interfaces, for our purposes,
are just callables which return different aspects of the 
<code>Application</code>.</p>

<p>There are four interfaces supported, three of which are defined in
<code>twisted.application.service</code>:</p>

<ul>
<li><code>IService</code>;</li>
<li><code>IServiceCollection</code>;</li>
<li><code>IProcess</code>; and</li>
<li><code>twisted.persisted.sob.IPersistable</code>.</li>
</ul>
<p>Constructing an application is done by calling it with a single
argument &mdash; its name. The name influences some things, among them
the default file it will persist to (which is why it is mandatory).</p>

<pre class="python">
from twisted.application import service
from twisted.persisted import sob
application = service.Application("myapplication")
s = service.IService(application)
sc = service.IServiceCollection(application)
proc = service.IProcess(application)
per = sob.IPersistable(application)
</pre>

<h2>Services</h2>

<p>The central framework classes that you will deal with, both as a Twisted
developer and administrator, are services, which implement <code
class="API">twisted.application.service.IService</code>. <code
class="API">twisted.application.service.Application</code> creates the root of
a tree of services that form a twisted application.  There is one <code
class="python">Application</code> instance per Twisted process, and it is the
top-level manager of resources and handler of events in the Twisted framework.
(Unlike other frameworks, like <code>Qt</code> or <code>wxWindows</code>, in
Twisted you do not derive from <code>Application</code>; rather you register
event handlers for it to call by adding Services to it.)  To store
configuration data, as well as other information, Twisted serializes <code
class="python">Application</code> instances, storing all services that have
been registered with them.  Since the whole <code
class="python">Application</code> instance is serialized, Twisted
<q>configuration</q> files are significantly more comprehensive than those for
other systems. These files store everything related to a running <code
class="python">Application</code> instance; in essence the full state of a
running process.</p>


<p>There are two interfaces relevant to services &mdash; <code>IService</code>
and <code>IServiceCollection</code>. <code>IService</code> represents
a <em>state-aware</em> container. That means the service is ready to be
notified of application start-ups and shutdowns. Services can be named
or unnamed. <code>IServiceCollection</code> holds other services. It
is possible to get named services from it by name. All services can be
gotten from it via either indexing or iteration.</p>

<p>Services can have a parent. Parents are set using
<code>setServiceParent</code>. Services are detached from their parent with
<code>disownServiceParent</code>. The parent must always be something that
complies with the <code>IServiceCollection</code> interface.</p>

<p>Most services will inherit from <code>Service</code>. This class
will set an attribute <code>running</code> to a true value
in <code>startService</code> and to a false value in <code>stopService</code>.
This attribute will always be false in just-unpersisted <code>Service</code>s,
without regards to its value at the time the <code>Service</code> was
persisted.</p>

<p><code>MultiService</code> implements both <code>IService</code> and
<code>IServiceCollection</code>. It is used to keep the services in
a hierarchy.</p>

<p>It is, of course, possible to write one's own services, but Twisted
comes out of the box with several services which are useful in writing
network applications. These are found in
<code>twisted.application.internet</code>, including 
<code class="API" base="twisted.application.internet">TCPServer</code>, 
<code class="API" base="twisted.application.internet">TCPClient</code>, and
<code class="API" base="twisted.application.internet">TimerService</code>. 
</p>

<p>To each <code>reactor.listenFoo</code> method corresponds a service
named <code>FooServer</code>. The arguments to its constructor are the
same as the arguments to the method. It calls the method on application
start-up, and stops listening on application shut-down.</p>

<p>To each <code>reactor.connectFoo</code> methods corresponds a service
named <code>FooClient</code>. The arguments to its constructor are the
same as the arguments to the method. It calls the method on application
start-up. It might, or might not, stop the connection on application
shut-down. (This limitation will be removed at some point, and guaranteed
disconnection will be implemented.)</p>

<p>The last service in <code>twisted.application.internet</code> is
<code>TimerService</code>. The constructor takes a period, a callable
and optionally arguments and keyword arguments. The service, when it
is running, will make sure the callable will be called every time the
period elapses.</p>

<h2>String Ports</h2>

<p>In Twisted, a <code>ServerFactory</code> does not care what kind
of virtual reliable circuit it listens too &mdash; SSL, UNIX domain
sockets, TCP sockets or something else. However, the APIs for constructing
the various <code>*Server</code> classes are different. When it is
necessary for a less sophisticated user to direct construction of such
a class, the <code>twisted.application.strports</code> module comes
in handy. It contains a function <code>service</code> which accepts
a <em>description</em> and a factory, and returns a service. The
description is a string in a mini-language designed to specify
ports. Full specifications are in the module docstrings.</p>

<h2>Configuration</h2>

<p>At some point, the objects for the configuration actually have
to be constructed. The easiest and simplest way to do it is to
use Python as the configuration mini-language. This format is called
<code>TAC</code> and traditionally files with this format have the extension
<code>.tac</code>.</p>

<p>TAC files need to be valid Python files, which construct a variable
named <code>application</code>. This variable will be the configuration
object. The full power of Python is available, of course.</p>

<p>Here's an example:</p>

<pre class="python">
# Import modules
from twisted.application import service, internet
from twisted.protocols import wire
from twisted.internet import protocol

# Construct the application
application = service.Application("echo")

# Get the IServiceCollection interface
myService = service.IServiceCollection(application)

# Create the protocol factory
myFactory = protocol.ServerFactory()
myFactory.protocol = wire.Echo

# Create the (sole) server
# Normally, the echo protocol lives on port 7, but since that
# is a privileged port, for this example we'll use port 7001
myServer = internet.TCPServer(7001, myFactory)

# Tie the service to the application
myServer.setServiceParent(myService)
</pre>

<p>Note that <code>setServiceParent</code> will, in fact, automatically
cast its argument to <code>IServiceCollection</code>. So, more succinctly,
the above code can be written:</p>
 
<pre class="python">
from twisted.application import service, internet
from twisted.protocols import wire
from twisted.internet import protocol
application = service.Application("echo")
myFactory = protocol.ServerFactory()
myFactory.protocol = wire.Echo
internet.TCPServer(7001, myFactory).setServiceParent(application)
</pre>

<p>TAC files are run with <code>twistd -y</code> or
<code>twistd --python</code>. The <code>twistd</code> manpage
has more information, but a common way to run is
<code>twistd -noy echo.tac</code>. This tells <code>twistd</code>
to not daemonize and not to try and save application on shutdown.</p>

</body> </html>
