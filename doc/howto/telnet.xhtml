<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html><head><title>Creating and working with a telnet server</title></head>
<body>
<h1>Creating and working with a telnet server</h1>

<h2>Simple Configuration</h2>

<p>To start things off, we're going to create a simple server that just
gives you remote access to a Python interpreter. We will use a telnet client
to access this server.</p>

<p>Run <code class="shell">mktap telnet -p 4040 -u admin -w admin</code> at
your shell prompt. If you list the contents of your current directory,
you'll notice a new file -- <code>telnet.tap</code>.  After you do this, run
<code class="shell">twistd -f telnet.tap</code>. Since the Application has a
telnet server that you specified to be on port 4040, it will start listening
for connections on this port. Try connecting with your favorite telnet
utility to 127.0.0.1 port 4040.</p>

<pre class="shell">
$ <em>telnet localhost 4040</em>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

twisted.manhole.telnet.ShellFactory
Twisted 1.0.4
username: <em>admin</em>
password: <em>admin</em>
&gt;&gt;&gt;
</pre>

<p>Now, you should see a Python prompt --
<code>&gt;&gt;&gt;</code>. You can type any valid Python code
here. Let's try looking around.</p>

<pre class="python-interpreter">
&gt;&gt;&gt; <em>dir()</em>
['__builtins__']
</pre>

<p>Ok, not much. let's play a little more:</p>
<pre class="python-interpreter">
&gt;&gt;&gt; <em>import __main__</em>
&gt;&gt;&gt; <em>dir(__main__)</em>
['__builtins__', '__doc__', '__name__', 'os', 'run', 'string', 'sys']

&gt;&gt;&gt; <em>from twisted.internet import app</em>
&gt;&gt;&gt; <em>app.theApplication</em>
&lt;'telnet' app&gt;
&gt;&gt;&gt; <em>app.theApplication.tcpPorts</em>
[(4040, &lt;twisted.manhole.telnet.ShellFactory instance at 0x8268edc&gt;,5,'')]
</pre>

<p>From this session we learned that there is an application object stored
in <code class="python">twisted.internet.app.theApplication</code> that's a
telnet app, and that it is listening on port 4040 with something called a
<code class="API" base="twisted.manhole.telnet">ShellFactory</code>. There
are lots of other attributes in <code class="python">theApplication</code>,
which we're not going to worry about for now.</p>

<p>Alright, so now you've decided that you hate Twisted and
want to shut it down. Or you just want to go to bed. Either
way, I'll tell you what to do. First, disconnect from your
telnet server. Then, back at your system's shell prompt, type
<code class="shell">kill `cat twistd.pid`</code> (the quotes
around <code class="shell">cat twistd.pid</code> are backticks,
not single-quotes). If you list the contents of your current
directory again, you'll notice that there will be a file named
telnet-shutdown.tap. If you wanted to restart the server with
exactly the same state as you left it, you could just run <code
class="shell">twistd -f telnet-shutdown.tap</code>. This is why
Twisted doesn't need any sort of configuration files -- all the
configuration data is stored right in the objects!</p>

<p>Now that you've learned how to create a telnet server with
'mktap telnet', we'll delve a little deeper and learn how one
is created behind the scenes. Start up a python interpreter and
make sure that the 'twisted' directory is in your module search
path.</p>

<pre class="python-interpreter">
Python 2.2.2 (#1, Mar 21 2003, 23:01:54) 
[GCC 3.2.3 20030316 (Debian prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <em>import sys</em>
&gt;&gt;&gt; <em>sys.path.append('/twisted/Twisted')</em>
</pre>

<p>I installed Twisted in /twisted, so the place where my
'twisted' package directory is at is /twisted/Twisted/twisted
(confusing, I know). For Python to find the 'twisted' package,
it must have the directory <em>containing</em> the package in sys.path
-- which is why I added /twisted/Twisted.</p>

<pre class="python-interpreter">
&gt;&gt;&gt; <em>from twisted.internet import app</em>
&gt;&gt;&gt; <em>from twisted.manhole import telnet</em>
&gt;&gt;&gt; <em>application = app.Application('telnet')</em>
&gt;&gt;&gt; <em>ts = telnet.ShellFactory()</em>
&gt;&gt;&gt; <em>application.listenTCP(4040, ts)</em>
</pre>

<p>The above is basically what <code class="shell">mktap
telnet</code> does. First we create a new Twisted Application,
we create a new telnet Shell Factory, and we tell the
application to listen on TCP port 4040 with the ShellFactory
we've created.</p>

<p>Now let's enable logging and start the application. This causes all
ports on the application to start listening for incoming connections.
This step is basically what the 'twistd' utility does.</p>

<pre class="python-interpreter">
&gt;&gt;&gt; <em>from twisted.python import log</em>
&gt;&gt;&gt; <em>log.startLogging(sys.stdout)</em>
&gt;&gt;&gt; <em>application.run()</em>
twisted.protocols.telnet.ShellFactory starting on 4040
</pre>

<p>You now have a functioning telnet server! You can connect with your
telnet program and work with it just the same as you did before. The
username and password both default to <q>admin</q>, but you can change those
by modifying the attributes of the <code class="python">ShellFactory</code>
object you created earlier. When you're done using the telnet server, you
can switch back to your python console and hit ctrl-C. The following should
appear:</p>

<pre class="python-interpreter">
Starting Shutdown Sequence.
Stopping main loop.
Main loop terminated.
Saving telnet application to telnet-shutdown.tap...
Saved.
&gt;&gt;&gt;
</pre>

<p>Your server was pickled up again and saved to the
telnet-shutdown.tap file, just like when you did <code
class="shell">kill `cat twistd.pid`</code>.</p>

<h2>More Complicated Configuration</h2>

<p>Let's suppose that we have the following application:</p>

<a href="listings/manhole/manhole1.py" class="py-listing">manhole1.py</a>

<p>This will give us a basic quote-of-the-day server: running <code
class="shell">telnet localhost 8123</code> will give us a quote. However,
once this is running, it would be nice to poke around inside it. We can add
the manhole-shell by adding a few lines to create a new server (a Factory)
listening on a different point:</p>

<a href="listings/manhole/manhole2.py" class="py-listing">manhole2.py</a>

<p>With this in place, you can telnet to port 8007, give the username
<q>boss</q> and password <q>sekrit</q>, and you'll end up with a shell that
behaves very much like the Python interpreter that you get by running
<code>python</code> all by itself, with lines you type prefixed with
<code>&gt;&gt;&gt;</code>.</p>


<pre class="shell">
% telnet localhost 8007
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

twisted.manhole.telnet.ShellFactory
Twisted 0.99.2
username: boss
password: *****
&gt;&gt;&gt;
</pre>

<p>Note that the original Quote-Of-The-Day server is still running on port
8123 by using <code class="shell">nc localhost 8123</code> (or <code
class="shell">telnet localhost 8123</code> if you don't have netcat
installed).</p>

<pre class="shell">
% nc localhost 8123
An apple a day keeps the doctor away.
</pre>

<p>The initial namespace of the manhole interpreter is defined by a
dictionary stored in the '<code>namespace</code>' attribute of the
ShellFactory. For convenience, you can put references to any objects you
like in that dict (<code class="python">f.namespace['foo'] = 12</code>), and
then retrieve them by name from the telnet session.</p>

<pre class="python-interpreter">
&gt;&gt;&gt; foo
12
</pre>

<p>Of course we can change that namespace by evaluating expressions in the
interpreter. To be a useful debugging tool, however, we want to get access
to our servers (the protocol <code class="API"
base="twisted.internet.protocol">Factory</code> instances and everything
hanging off of them). We start by gaining access to the main <code
class="API" base="twisted.internet.app">Application</code> instance through
a global variable stored in the <code>app</code> module (assuming we
ran using an Application and not the reactor directly):</p>

<pre class="python-interpreter">
&gt;&gt;&gt; import twisted.internet.app         
&gt;&gt;&gt; a = twisted.internet.app.theApplication
&gt;&gt;&gt; a
&lt;'demo' app&gt;
</pre>

<p>This object holds a number of things of interest: the list of Services
(subclasses of ApplicationService that have been added to the application,
most notably Perspective Broker services), and the list of ports on which
protocol Factories are listening. The ports are kept in a number of lists,
and the Factory object itself is available inside those lists (word wrapped
for clarity):</p>

<pre class="python-interpreter">
&gt;&gt;&gt; a.tcpPorts
[(8123, &lt;twisted.internet.protocol.Factory instance at 0x8249b8c&gt;, 5, ''),
(8007, &lt;twisted.manhole.telnet.ShellFactory instance at 0x824aefc&gt;, 5, '')
]
&gt;&gt;&gt; f = a.tcpPorts[0][1]
&gt;&gt;&gt; f
&lt;twisted.internet.protocol.Factory instance at 0x8249b8c&gt;
</pre>

<p>Now that we have access to that QOTD Factory, what can we do? We can
modify any attribute of the object, or call functions on it. Remember that
the Factory stores a reference to a subclass of Protocol, and it uses that
reference to create new Protocol instances for each new connection. We can
change that reference to make the Factory create something else:</p>

<pre class="python-interpreter">
&gt;&gt;&gt; f.protocol
&lt;class twisted.protocols.wire.QOTD at 0x824a66c&gt;
&gt;&gt;&gt; from twisted.protocols.wire import Daytime
&gt;&gt;&gt; f.protocol = Daytime
</pre>


<p>Congratulations, you've just changed the Factory to use the <code
class="API" base="twisted.protocols.wire">Daytime</code> protocol instead of
the <code class="API" base="twisted.protocols.wire">QOTD</code> protocol.
You have just transformed the QOTD server into a Daytime server. Connect to
port 8123 now and see the difference: you get a timestamp instead of a
quote:</p>

<pre class="shell">
% nc localhost 8123
Sat Sep 28 09:11:37 2002
</pre>

<p>From here, you can do anything you want to your application. It is a good
idea to check the source for the <code class="API"
base="twisted.internet.app">Application</code> and <code class="API"
base="twisted.cred.service">Service</code> classes to see what else you can
extract from them.</p>

<p>Note: to terminate your session, you'll need to exit the telnet or netcat
program (the usual control-D that works in the Python interpreter won't work
here). Try control-] for telnet. Also note that any exceptions caused by
your manhole session will be displayed both in the telnet session <em>and</em>
in the stderr on the application side.</p>

</body></html>
