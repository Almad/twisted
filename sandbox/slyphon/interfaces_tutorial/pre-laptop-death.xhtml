<html xmlns="http://www.w3.org/1999/xhtml">
<head><title>Making use of the twisted component system</title>

<body>
<h1>Making use of the twisted component system</h1>

<h2>Introduction</h2>

<h3>Foreword</h3>
<p>I remember after reading the <a href="components.html">components howto</a> feeling
as though I'd been exposed to a new and powerul way of thinking about objects, but a bit
lost as to how to put that thinking to practical use. I'd drunk the kool-aid, and it
tasted good, but the positive effects hadn't kicked in yet. About a month later, I 
started working on a small project and it dawned on me that the problem I was trying to
solve was <em>perfect</em> for interfaces and adapters. I want to try and share that 
epiphany with you and help you to make use of this wonderfully powerful philosophy.
I'm assuming that you've read Donovan Preston's components howto, as I will be expanding
on the principles introduced there.
</p>

<h2>What makes components so cool?</h2>
<p>Components are cool because they allow you to not care about what type of object
you've been handed, they allow you to generalize your code so that it doesn't get
bogged down with implementation-specific details. The conceptual item that allows you
to do this is an <code class="API" base="twisted.python.components">Interface</code>.
</p>

<p>Interfaces on their own are pretty boring. </p>

<pre class="python">
from twisted.python import components
class IPublish(components.Interface):
    """I print out an object's data in an object-specific manner
    @cvar data: i am the data you're interested in publishing
    """
    def publishWithLen(self, len=78):
        """I print out an object's data with maximum line-length len"""
        
    def publishWithSpacing(self, space=1):
        """I print out an object's data with space spaces between each item"""
</pre>

<p>They don't define any logic, only the public API that you can use on an
object once it's been <em>addapted</em> to (or <em>wrapped</em> in) an
interface. Wrapping an object in an interface is the common way one refers
to making use of an Interface. After you wrap an object with an Interface, you
can then call the methods and access the attributes an Interface defines.
</p>

<p>First, let me define a simple class that we're going to wrap in
IPublish</p>

<pre class="python">
class Song(object):
    artist = None
    album = None
    year = None
    lyricFile = None

class SubterraneanHomesickBlues(Song):
    artist = "Bob Dylan"
    album = "Bringin' it all back home..."
    year = 1966
    lyricFile = "dylan/biabh/shb.txt"
</pre>

<p>And this is what it looks like when you wrap a class in an Interface
</p>

<pre class="python-interpreter">
>>> shb = SubterraneanHomesickBlues()
>>> ipshb = IPublish(shb) # wrap foo with IPublish
>>> ipshb.data
"Johnny's in the basement mixin' up the medicine..."

>>> ipshb.publishWithLen(20)
"Johnny's in the bas
ement mixin' up the 
medicine..."

>>> ipshb.publishWithSpacing(2)
"Johnny's  in  the  basement  mixin'  up  the  medicine..."
</pre>

<p>So far, so good. You know that an Interface defines methods (behavior) you
can invoke and data (information) that you can access when an object has been
wrapped. You may be wondering, "Hey, hang on a second, how did you get the
<code>IPublish</code> behavior from the <code>SubterraneanHomesickBlues</code>
instance <code>shb</code>?" </p>

<h2>Adapters</h2>

<p>Remember how I said before that you "adapt an object to an interface"?
Well, this is where <code class="API"
base="twisted.python.components">Adapters</code> come in.
<code>Adapters</code> are the glue and brains behind
<code>Interfaces</code>. An <code>Adapter</code> defines the logic that allows
a given object to be <em>adapted</em> to a certain interface. Here's the
adapter that adapts SubterraneanHomesickBlues to IPublish.
</p>

<code class="python">
from twisted.python import components
class AdaptSongToIPublish(components.Adapter):  
    data = None
    def __init__(self, original):
        self.original = original
        self.data = file(original.lyricFile, 'r').read()

    def publishWithLen(self, len=78):
        from textwrap import wrap
        print '\n'.join(wrap(self.data, len))

    def publishWithSpacing(self, space=1):
        print self.data.replace(' ', '  ')
</code>

<p>An <code>Adapter</code>'s <code>__init__</code> is passed the object that i 


</body>
</head>
</html>
