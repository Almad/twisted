<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">

<html>
<head>
  <title>Components Phase 2 - Why</title>
</head>

<body>
  <h1>Components Phase 2 - Why</h1>

  <p>This tutorial's purpose is two-fold. It's designed to be a
  logical next-step to the Component Architecture howto, and will
  build on the basic concepts presented there. As a side-benefit,
  this tutorial will cover the important parts of the new (to
  Twisted) zope.interfaces API, and will hopefully bring everyone
  up-to-speed on how to make use of this new, powerful tool.
  </p>

  <p>I remember after reading the <a href=
  "components.html">components howto</a> feeling as though I'd been
  exposed to a new and powerul way of thinking about objects, but a
  bit lost as to how to put that thinking to practical use. I'd
  drunk the kool-aid, and it tasted good, but the positive effects
  hadn't kicked in yet. About a month later, I started working on a
  small project and it dawned on me that the problem I was trying
  to solve was <em>perfect</em> for interfaces and adapters. I want
  to try and share that epiphany with you and help you to make use
  of this wonderfully powerful philosophy. I'm assuming that you've
  read Donovan Preston's components howto, as I will be expanding
  on the principles introduced there.</p>

<h2>Practical matters</h2>
<p>As of Twisted 1.3.0, the zope.interfaces package is not distributed as part
of Twisted, so you'll need to download it and put it in your <code>sys.path</code>.
Zope3 is available through anonymous svn by doing:</p>

<pre class="shell">
user@host ~> svn co svn://svn.zope.org/repos/main/Zope3/trunk Zope3
</pre>

<p>You'll also need to copy the version of components.py from itamar's sandbox, and
replace the version currently in twisted/python. 
</p>

  <h2>What makes components so cool?</h2>

  <p>Components are cool because they allow you to not care about
  what type of object you've been handed, they allow you to
  generalize your code so that it doesn't get bogged down with
  implementation-specific details. If you've ever been in a
  situation where you thought, <em>"Wow, I really need isinstance()
  here, but everyone in #python is telling me that sucks..."</em> you could
  have made good use of a component architecture. The conceptual
  item that allows you to do this is an 
  <code class="API" base="twisted.python.components">Interface</code>.</p>


<h2>What are interfaces?</h2>
<p>An interface in the general sense is the publicly defined API for your
class. It lets everyone know what methods and attributes are intended to
be accessed on a given object. A good example of an interface is the
<em>file-like</em> objects in the stdlib, the builtin <code>file</code> and
the <code>StringIO</code> objects. They are two completely different classes,
one to deal with the filesystem, and one to deal with string construction, but
they share a common <em>interface</em>. In most cases, your programs won't care
if they're handed a real file object or a StringIO object, because the methods
used to manipulate those instances are the same.
</p>

<p>With a component system, this concept of interface plays an important role,
as we <em>apply</em> an interface to instances
of objects that don't provide them according to their original definition. When
we wrap an object in an interface, we make a request of the
component architecture. The component system looks at two things, the class
of interface we're attempting to wrap an instance in, and the type of the object
being wrapped. If we have <em>registered</em> an adapter to use for this
combination of Interface and instance, the component system calls the adapter
with the instance as it's first (and only) argument.</p>

<h2>A simple example</h2>

<a href="cmplist1.py" class="py-listing"></a>

<h3>Explanation</h3>

<p>This is a slightly modified version of the original components example. We
start out by defining some <code>ElectricDevices</code>, <code>USHairDryer</code>,
and <code>UKStereo</code>. Each of them expect to be powered by a certain (and
different) level of voltage. Next we define some sockets that will power our devices,
each providing a different level of voltage. We then try plugging each device into each
type of socket, and we get the following result:
</p>

<pre>
first we try a few combinations of plugging devices into sockets


I am a US Hair Dryer. I was plugged in properly and am now operating.
I am a UK Stereo. I was plugged in properly and am now operating.


BANG! ZAP! *=&gt; SPARKS FLY EVERYWHERE &lt;=*
I was plugged in improperly and 
now you have no US Hair Dryer any more.


BANG! ZAP! *=&gt; SPARKS FLY EVERYWHERE &lt;=*
I was plugged in improperly and 
now you have no UK Stereo any more.
</pre>

<p>Oh No! We simply be traveling abroad without our USHairDryer! And what about
that UKStereo! This is where <em>adapters</em> come into play. First, we define
an interface, IVoltageConverter. 
</p>

<h2>A slightly more involved example</h2>

<a href="cmplist2.py" class="py-listing" />

<h3>Explanation</h3>

<p>Okay, now there's a fair amount of stuff going on here, so allow me to begin at
the beginning.</p>

<p>First we define our interface. Notice that in the Zope interface style, interfaces do not
use <code>self</code> in their function definitions. This is because zope thinks that
interfaces should how you <strong>use</strong> interfaces, rather than their implementation
details (and, one could argue that self is an implementation detail of the Python
language). Our interface is dead-simple and only defines one method,
<code>getPath</code>. Interface definitions are an ideal place to put docstrings,
as your public interfaces are likely to remain more stable than your classes.</p>

<p>Pretty simple, huh? The adapter simply "wraps" the instance of the class it is
adapting, and performs whatever "middle steps" are necessary to get that original
instance to provide the interface desired. So, how does one define what interfaces
a given adapter class is going to be adapting to? We use the
<code>zope.interfaces.implements</code> method. Now this next sentence is very
important:</p>

<quote>
<em>"An adapter class <strong>implements</strong> an interface. <strong>Instances</strong> of that
class <strong>provide</strong> that interface.</em>
</quote>

<p>It is important to know the difference between <em>implements</em> and <em>provides</em>
because the zope interfaces API authors use these words to mean specific, and wholly different
things. If you don't totally understand the distinction right now, don't worry, just try to store
that in the back of your mind as we move forward.</p>

<p>By declaring that a class implements an interface, we are indicating to the component
architecture what that adapter is capable of. Now, the last vital step is to tie this
all together, the adapters, the original interfaces (class types that will be adapted), and
the interfaces to which those classes will be adapted. We do that by using
<code>twisted.python.components.registerAdapter</code>. When we call <code>registerAdapter</code>
in line XXX we are saying to the component architecture:</p>

<blockquote><q>When we request
that instance <code>aList</code> of <code>types.ListType</code> be adapted to the interface
<code>IFilePath</code>, pass <code>aList</code> to the callable<span class="footnote">to be
technically accurate, we say <q>callable</q> here because an adapter doesn't have to be a
class, but we'll cover that later</span>&nbsp;<code>ListPath</code> and return the result.</q>
</blockquote>


<p>So, in our <code>main</code> function, we can see what it looks like to "wrap" or "adapt"
an instance to an interface. The line <code>adapterToIFilePath = IFilePath(original)</code>
is where the adaptation happens and <code>adapterToIFilePath.getPath()</code> is actually calling
the method <code>getPath</code> on the proper adapter instance.</p>

<p>When you run the program, you'll see the following output:</p>

<pre>
baz
path/to/knowhere
/home/slyphon/Projects/Twisted/working/twisted/__init__.pyc
/home/slyphon/Projects/Twisted/trunk/sandbox/slyphon/interfaces_tutorial/simple_interface.py
</pre>

<p>So, this is what all the fuss is about. At the time we call <code>IFilePath(original).getPath()</code>
on the object, we don't care <em>what class that object is an instance of!</em> As long as we have
defined an adapter class to act as an interpreter between the original object's interface and the
desired interface, we know that the adapted object will do what we want it to do!</p>

<h2>Using zope.interface.directlyProvides()</h2>

<p>Now, one thing that's important to realise is that adapters don't actually have to be classes,
 they just have to be callable, and take the instance-to-be-adapted as their only argument.
In the case of using a function as an adapter, we make use of the
<code>zope.interface.directlyProvides</code> method.
</p>

<a href="cmplist3.py" class="py-listing" />

<h3>Explanation</h3>

<p>Remember how before I said that <q>instances of a class <em>provide</em> an interface</q>?
Well, here's where that comes into play. Technically speaking <code>modulePath</code>,
<code>listPath</code>, and <code>filePath</code> are all instances of <code>types.FunctionType</code>.
Instead of defining a class that <em>implements</em> the interface, we instead say that an instance
of <code>types.FunctionType</code>&nbsp;<em>directlyProvides</em> a given interface. In this case, the string
returned when we do <code>IFilePath(original)</code> is the interface...it's pure data.
</p>

<h2>Defining Interface Attributes</h2>

<p>Now we move a little deeper into zope's interfaces. The semantics for describing zope interfaces
are a little different from the classic Twisted way of doing things. In the previous examples,
the interfaces we defined had only methods for attributes, so here we'll see how to define attributes
of other types.</p>

<a href="cmplist4.py" class="py-listing" />

<h3>output</h3>

<pre>
IFile.__doc__: "an interface that models the stdlib's file object"
IFile.__name__: "IFile"

use mapping syntax to access an interfaces' attributes: 


name = IFile['name']
type(name): &lt;class 'zope.interface.interface.Attribute'&gt;
name.__name__: 'name'
name.__doc__: 'the name of the file (or appropriate alternative)'


you can use 'in' to determine if an interface defines a name

'name' in IFile: True


you can iterate over the names an interface provides

repr('\n\t'.join([n for n in IFile])): 
	softspace
	name
	encoding
	read
	next
	mode
	closed
	flush
	close
	newlines

attributes that are methods provide access to the method signature

read = IFile['read']
read.getSignatureString(): '(size=-1)'
</pre>

<h3>Explanation</h3>
<p>Now, chances are you won't have to use many of these features, and if you do, you can look
in the zope.interface README.txt, which will give you a very good explanation. The important thing
to notice here is how to define attributes of classes that aren't methods. In the Twisted component
system, there was no way of accomplishing this, besides for the writing of docstrings. In zope.interface
they allow us to define these class attributes using the <code>zope.interface.Attribute</code> method,
which takes the attribute's docstring as an argument.
</p>

<h2>Wrapping other people's objects</h2>

<p>One place where interfaces can save the day is when you have to use someone else's library, and
you need to use their objects in a different way than they intended. One example of this is where
you want to do object publishing. You want to separate the data to be displayed from the rendering
code from the code that will display the data.
</p>

<p>In this last listing I've tried to give a fairly involved example to show what you can do with
a component system when you begin to get comfortable. This program takes a string that represents
a path, and wraps it in an interface that allows us to list all files in that directory. We then
wrap that lister instance in IDisplay to print out the results in two different ways. Next, we wrap
that lister object in an IFileGrepper interface, set its pattern attribute, and wrap it in an
IDisplay interface to show (again) two different kinds of output.
</p>

<p>I'll leave the nitty-gritty details for you to figure out.</p>

<div class="note">need to expand this a little bit, make clear what classes would be display, etc.</div>

<a href="cmplist5.py" class="py-listing" />

<h2>Conclusion</h2>

<p>Interfaces are an incredibly useful tool because they allow your code to focus on objects' interface
rather than implementation-specific details such as what class they are instances of. Interfaces, and
component systems in general, are also very useful to avoid monkey-patching of existing code.</p>


</body>
</html>
