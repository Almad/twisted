Yay! I am writing a bunch of C code.
type iocpcore provides doIteration (for PosixReactorBase)
and a bunch of operation-scheduling methods that return deferreds

performance optimization: reuse overlapped structs (probably worthless)

My overlapped struct is bigger by a sizeof(PyObject *) and refers to
the Deferred. The struct is malloc'ed when operation is issued
and free'ed when GetQueuedCompletionResult returns it.
If GetQueuedCompletionStatus never returns it, doIteration was not called
enough times.
Upon reactor.stop, CancelIo all handles, then loop through GQCS ignoring
results.

Need to keep track of all pending operations, saving ov pointer, deferred
reference and handle pointer. (dict of op->None)
--------------------------------------

Need:
specify operation as a class attribute for things such as IoHandle and Socket

be able to track handles for pending operations and, on reactor.stop,
CancelIo them and drain the completion queue

A bunch of wrappers that live at least as long as requests, handle
deferred dispatch (argh same as it is now)
