
from slides import Slide, Bullet, SubBullet, URL, Image, PRE
from twslides import Lecture

class PythonSource:
    def __init__(self, content):
        self.content = content
    def toHTML(self):
        return '<pre class="python">%s</pre>' % (self.content,)

class Raw:
    def __init__(self, content):
        self.content = content
    def toHTML(self):
        return self.content + '\n'

lecture = Lecture(
    "Transluscent Inter-Process Service Migration",
    Slide("What is migration?",
          Bullet("Transfer of service responsibilities"),
          Image("transfer-of-service-responsibilities.png", "Service Responsibilities Being Transferred")),
    Slide("Why do we need migration?",
          Bullet("Buggy software needs to be fixed"),
          Bullet("New features need to be rolled out"),
          Bullet("Somewhat useful as a load balancing technique")),
    Slide("Naive solutions",
          Bullet("Disconnect all users"),
          Bullet("Shutdown old server"),
          Bullet("Bring up new server"),
          Bullet("Let users reconnect")),
    Slide("Problems with naive solutions",
          Bullet("Interruption of service"),
          Bullet("Unexpected difficulties leave service offline")),
    Slide("Load balancing",
          Bullet("Handle requests on least loaded machine"),
          Bullet("Long running requests move between nodes of a cluster")),
    Slide("Upgrading code",
          Bullet("In-Process",
                 SubBullet(Bullet("reload() is not reversible"))),
          Bullet("Intra-Process",
                 SubBullet(Bullet("Incremental updates"),
                           SubBullet(Bullet("Cheaper code updates means more frequent code updates"),
                                     Bullet("More frequent code updates means smaller code updates"))),
                 SubBullet(Bullet("Testable"),
                           SubBullet(Bullet("State can be migrated from live server to test server"),
                                     Bullet("For testing, user connections can be ignored"),
                                     Bullet("Failed migration test leads to defunct test/staging server, leave production server unchanged"))),
                 SubBullet(Bullet("Reversible"),
                           SubBullet(Bullet("Mistaken changes can be reverted by migrating back to previous server"),
                                     Bullet("Doesn't come for free: requires state downgraders"))))),
    Slide("Upgrading hardware",
          Bullet("Service must survive hardware reset"),
          Bullet("Requires multiple machines and ability to pass service between them")),
    Slide("Problems with migration",
          Bullet("Requires all state to be serializable or otherwise persistent",
                 SubBullet(Bullet("Most data-driven services require this anyway"),
                           Bullet("If user data doesn't persist, the service isn't very useful"),
                           Bullet("But migration can introduce unexpected serialization requirements")))),
    Slide("Different migration models",
          Bullet("Migration can occur all at once or gradually over time"),
          Bullet("Complexity can vary",
                 SubBullet(Bullet("Stateless migration (listening ports)")),
                 SubBullet(Bullet("Stateful migration (client and connection data)")))),
    Slide("execl()",
          Bullet("Replace existing process with a new one"),
          Bullet("File descriptors remain open")),
    Slide("Problems with execl()",
          Bullet("Monolithic"),
          Bullet("Irreversible"),
          Bullet("Failure can lead to long periods of downtime")),
    Slide("Multiple processes, one machine",
          Bullet("Socket passing tricks work")),
    Slide("Problems with multiple processes",
          Bullet("Doesn't always scale up without massively parallel hardware")),
    Slide("Multiple machines",
          Bullet("")),
    Slide("Problems with multiple machines",
          Bullet("Socket tricks don't work"),
          Bullet("Client disconnect is almost always required"),
          Bullet("Front-end machines can mask over back-end switching",
                 SubBullet("More complicated but still feasible",
                           Bullet("Similar problems as with hardware upgrades")))),
    Slide("Example of simple (stateless) migration",
          Bullet("Start a web server in one process"),
          Bullet("Start a new process"),
          Bullet("Server port passes from old to new"),
          Bullet("Old process exits")),
    Slide("Example of complex (stateful) migration",
          Bullet("Start a Python interpreter accessible via telnet"),
          Bullet("Connect and populate a namespace"),
          Bullet("Start a new process"),
          Bullet("Client connection and server port pass from old to new"),
          Bullet("Old process exits"),
          Bullet("Client connection and namespace in-tact")),
    Slide("Migration - a demonstration",
          Bullet(PythonSource("""\
>>> import sys, os
>>> sys.version
'2.2.3+ (#1, Feb 25 2004, 23:29:31) \n[GCC 3.3.3 (Debian)]'
>>> os.getpid()
29713
>>> sys.version
'2.3.3 (#2, Jan 13 2004, 00:47:05) \n[GCC 3.3.3 20040110 (prerelease)
(Debian)]'
>>> os.getpid()
29717
"""))),
    Slide("Migration walk-through",
          Bullet("Server setup",
                 SubBullet(PythonSource("""\
"""))),
          Bullet()),
    Slide("Integration with existing software",
          Bullet("Serialization code should be kept separate from application code"),
          Bullet("Few changes to application code are required",
                 SubBullet(Bullet("Some are unavoidable"),
                           Bullet(PythonSource("""\
class ShellFactory(telnet.ShellFactory):
    def __init__(self, *a, **kw):
        telnet.ShellFactory.__init__(self, *a, **kw)
        self.protos = {}

    def buildProtocol(self, addr):
        p = telnet.ShellFactory.buildProtocol(self, addr)
        self.protos[addr] = p
        return p
"""))))),
    Slide("Design for migratability",
          Bullet("Maintain clear separate between code and data"),
          Bullet("")),
    Slide("Conclusions",
          Bullet("Multitude of migration options available for Python software"),
          Bullet("Migration without service interruption provides great flexibility for implementors")),
    Slide("Future directions",
          Bullet("Increase flexibility of existing migration code",
                 SubBullet(Bullet("Support more special objects (eg, scheduled events)"),
                           Bullet("Port to new version of PB, when available")))),
    Slide("Further reading",
          Bullet(),
          Bullet()),
    Slide("Questions"))

lecture.renderHTML(".", "migration-%02d.html", css="main.css")
