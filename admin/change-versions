#!/usr/bin/env python
# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.

"""This program allows you to edit twisted/*/__init__.py to insert
new version numbers into svn easily."""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

import re
try:
    # For platforms where this isn't automatic
    import readline
except:
    pass

from twisted.python import dist, reflect
projectNames = ['twisted']+['twisted.'+proj for proj in dist.twisted_subprojects]

class Project:
    # currentVersionStr
    # newVersionStr
    # newVersionInfo
    # filename
    # name
    pass

projects = []

verstringMatcher = re.compile("^([0-9]+)\.([0-9]+)\.([0-9]+)(?:([abc])([0-9]+))?$")
def inputNewVersion(project):
    match = None
    while match is None:
        new_vers = raw_input("New version for %s? [%s] " % (project.name, project.currentVersion))
        if not new_vers:
            return None,None
        match = verstringMatcher.match(new_vers)
        if match is None:
            print 'Invalid format. Use e.g. 2.0.0 or 2.0.0a1, for a in abc'
    major,minor,micro,level,serial = match.groups()
    if level is None: level = 'f'
    if serial is None: serial = 0
    
    major=int(major)
    minor=int(minor)
    micro=int(micro)
    level = {'a':'alpha', 'b':'beta', 'c':'candidate', 'f':'final'}[level]
    serial=int(serial)
    return new_vers, (major,minor,micro,level,serial)


def gatherCurrentInfo():
    for pname in projectNames:
        mod = reflect.namedModule(pname)
        project = Project()
        project.name = pname
        project.currentVersion = mod.__version__
        fname = os.path.abspath(mod.__file__)
        if fname.endswith(".pyc"):
            fname=fname[:-1]
        project.filename = fname
        projects.append(project)



def modifyInit(project):
    filename = project.filename
    
    print ">> Modifying:", os.path.abspath(filename)
    
    os.rename(filename, filename+'.bak')
    f = open(filename+'.bak')
    oldlines = f.readlines()
    f.close()
    f = open(filename + '.new', 'w')

    # Write out old contents
    for l in oldlines:
        if l.startswith("__version__ = ") or l.startswith("version_info = "):
            continue
        else:
            f.write(l)
    # Add new lines:
    f.write('__version__ = "%s"%sversion_info = %s%s' % (
        project.newVersionStr, os.linesep,
        repr(project.newVersionInfo), os.linesep))
    f.close()
    os.rename(filename+'.new', filename)
    os.unlink(filename+'.bak')

def main():
    print "Gathering info..."
    gatherCurrentInfo()
    
    print "Current versions:"
    for project in projects:
        print "  %s %s (%s)" % (project.name, project.currentVersion, project.filename)
        
    print ""
    # Get input
    for project in projects:
        project.newVersionStr, project.newVersionInfo = inputNewVersion(project)
        
    print "Modifying files..."
    for project in projects:
        if project.newVersionStr is None:
            continue # Not changing this one

        modifyInit(project)
        # alsoModifyOtherFiles()

if __name__=='__main__':
    main()
