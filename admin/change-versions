#!/usr/bin/env python
# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.

"""
This program allows you to edit a bunch of crap in the SVN Twisted
tree to insert new version numbers easily.
"""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

import re
try:
    # For platforms where this isn't automatic
    import readline
except:
    pass

from twisted.python import dist, reflect, release

class Project:
    newVersionStr = None
    newVersionInfo = None
    initfile = None
    name = None
    def __init__(self, **kw):
        self.__dict__.update(kw)

class Done(Exception):
    pass

verstringMatcher = re.compile("^([0-9]+)\.([0-9]+)\.([0-9]+)$")
def inputNewVersion(project):
    match = None
    while match is None:
        new_vers = raw_input("New version for %s? " % (project.name))
        if not new_vers:
            return None,None
        if new_vers == 'done':
            raise Done
        match = verstringMatcher.match(new_vers)
        if match is None:
            print 'Invalid format. Use e.g. 2.0.0.'
    major,minor,micro = match.groups()

    major=int(major)
    minor=int(minor)
    micro=int(micro)
    return new_vers, (major,minor,micro)


## def gatherCurrentInfo():
##     for pname in projectNames:
##         mod = reflect.namedModule(pname)
##         project = Project()
##         project.name = pname
##         project.currentVersion = mod.__version__
##         fname = os.path.abspath(mod.__file__)
##         if fname.endswith(".pyc"):
##             fname=fname[:-1]
##         project.filename = fname
##         yield project


def modifyInit(project):
    filename = project.initfile
    print ">> Modifying:", filename
    release.replaceInFile(filename, {'SVN-Trunk': project.newVersionStr})

def main():
    print "Gathering info..."

    projects = [Project(name='twisted', initfile='twisted/__init__.py')]
    for pname in dist.twisted_subprojects:
        projects.append(
            Project(name='twisted.'+pname,
                    initfile='twisted/%s/__init__.py' % pname))

    # Get input
    print "type 'done' when done"
    for project in projects:
        try:
            project.newVersionStr, project.newVersionInfo = inputNewVersion(
                project)
        except Done:
            break
        
    print "Modifying files..."
    for project in projects:
        if project.newVersionStr is None:
            continue # Not changing this one

        modifyInit(project)
        # alsoModifyOtherFiles()

if __name__=='__main__':
    main()
