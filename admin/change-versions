#!/usr/bin/env python
# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.

"""
This program allows you to edit a bunch of crap in the SVN Twisted
tree to insert new version numbers easily.
"""

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

import re
try:
    # For platforms where this isn't automatic
    import readline
except:
    pass

from twisted.python import dist, reflect, release
from os.path import join as opj
import time

class Project:
    newVersionStr = None
    initfile = None
    name = None
    pkgname = None
    currentVersionStr = None
    dir = None
    def __init__(self, **kw):
        self.__dict__.update(kw)


class Done(Exception):
    pass


verstringMatcher = re.compile("^([0-9]+)\.([0-9]+)\.([0-9]+)$")
def inputNewVersion(project):
    match = None
    while match is None:
        new_vers = raw_input("New version for %s? " % (project.name))
        if not new_vers:
            return None,None
        if new_vers == 'done':
            raise Done
        match = verstringMatcher.match(new_vers)
        if match is None:
            print 'Invalid format. Use e.g. 2.0.0.'
    major,minor,micro = match.groups()

    major=int(major)
    minor=int(minor)
    micro=int(micro)
    return new_vers, (major,minor,micro)


def gatherCurrentInfo():
    projects = [Project(name='twisted', pkgname='twisted',
                        initfile='twisted/__init__.py',
                        dir='twisted')]
    for pname in dist.twisted_subprojects:
        dir = opj('twisted', pname)
        pkgname = 'twisted.'+pname
        currentVersionStr = reflect.namedModule(pkgname).__version__
        projects.append(
            Project(name=pname,
                    pkgname=pkgname,
                    dir=dir,
                    initfile=opj(dir, '__init__.py'),
                    currentVersionStr=currentVersionStr
                    )
            )
    return projects

def main():
    projects = gatherCurrentInfo()
    print "== Current Versions =="
    for proj in projects:
        print "%s %s" % (proj.name.capitalize(), proj.currentVersionStr)
    print
    
    # Get input
    print "type 'done' when done"
    for project in projects:
        try:
            project.newVersionStr = inputNewVersion(project)[0]
        except Done:
            break

## SVN-Trunk is always project-context-sensitive version number.
## Places where it shows up:

## README files, setup.py files, __init__.py files, twisted/copyright.py.

## SUMO-Date is the date a sumo version was released. Proj-SVN-Trunk,
## where Proj is a capitalized Twisted subproject name or 'Core'. These
## only show up in the toplevel sumo README.

    print "Modifying files..."
    fatRepl = {'SUMO-Date': time.strftime('%Y-%m-%d')}
    for project in projects:
        if project.name == 'twisted':
            key = 'Core-SVN-Trunk'
        else:
            key = '%s-SVN-Trunk' % project.name.capitalize()
        if project.newVersionStr:
            val = project.newVersionStr
        else:
            val = project.currentVersionStr
        fatRepl[key] = val

    for project in projects:
        if not project.newVersionStr:
            continue
        print "|| Modifying %s's files." % project.pkgname
        for fn in filter(os.path.exists, [project.initfile,
                                          opj(project.dir, 'topfiles/README'),
                                          opj(project.dir, 'topfiles/setup.py'),
                                          opj(project.dir, 'copyright.py'),
                                          ]):
            print "|| >> Modifying:", fn
            release.replaceInFile(fn, {'SVN-Trunk': project.newVersionStr})
    print "|| Modifying Sumo README.", fatRepl
    release.replaceInFile('README', fatRepl)

if __name__=='__main__':
    main()
