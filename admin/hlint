#!/usr/bin/python

from twisted.lore import tree
from twisted.web import domhelpers
from twisted.python import reflect

class TagChecker:

    def __init__(self, allowed):
        self.allowed = allowed

    def check(self, dom, filename):
        for method in reflect.prefixedMethods(self, 'check_'):
            method(dom, filename)

    def _reportError(self, filename, element, error):
        t = (filename,)+element._markpos+(error,)
        print ("%s:%s:%s: %s" % t)

    def check_disallowedElements(self, dom, filename):
        def m(node, self=self):
            return not self.allowed(node.tagName)
        for element in domhelpers.findElements(dom, m):
            self._reportError(filename, element,
                               'unrecommended tag %s' % element.tagName)

    def check_codeClass(self, dom, filename):
        classes = ['shell', 'API', 'python', 'py-prototype', 'py-filename',
                   'py-src-string', 'py-signature', 'py-src-parameter']
        def matcher(element, classes=classes):
            if element.tagName != 'code':
                return 0
            if not element.hasAttribute('class'):
                return 0
            if element.getAttribute('class') in classes:
                return 0
            return 1
        for element in domhelpers.findElements(dom, matcher):
            self._reportError(filename, element,
                              'unkown class %s' %element.getAttribute('class'))

    def check_quote(self, dom, filename):
        def matcher(node):
            return ('"' in getattr(node, 'data', '') and
                    node.parentNode.tagName not in ('code', 'pre'))
        for node in domhelpers.findNodes(dom, matcher):
            self._reportError(filename, node.parentNode, 'contains quote')

def main():
    import sys
    allowed = {}
    for tag in ("html", "title", "head", "body", "h1", "h2", "h3", "ol", "ul",
                "dl", "li", "dt", "dd", "p", "code", "img", "blockquote", "a",
                "cite", "div", "span", "strong", "em", "pre", "q", "table",
                "tr", "td", "th", "style"):
        allowed[tag] = None
    checker = TagChecker(allowed.has_key)
    for file in sys.argv[1:]:
        dom = tree.parseFileAndReport(file)
        if not dom:
            continue
        checker.check(dom, file)

if __name__ == '__main__':
   main()
