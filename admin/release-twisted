#!/usr/bin/env python

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.

from __future__ import nested_scopes

import sys,os,string

if string.find(os.path.abspath(sys.argv[0]),'Twisted') != -1:
    sys.path.append(os.path.dirname(
      os.path.dirname(os.path.abspath(sys.argv[0]))))
sys.path.append('.')
### end of preamble

#
# The Twisted release script. This is terribly unix-centric.
#

from twisted.python import usage

import string, os, shutil

class Options(usage.Options):
    optParameters = [['source', 's', 'Twisted', "The directory of the Twisted source to build a release from."],
                     ['version', 'v', None, "The version of this release."],
                     ['release', 'r', os.path.expanduser('~/Releases'), "The directory where your Twisted release archive is."]]
    
    optFlags = [['nodocs', 'n', "Don't make a Documentation tarball."],
                ['onlydocs', 'D', "*ONLY* make the docs (that is, don't generate the regular Twisted distribution). Twisted-$VERSION and TwistedDocs-$VERSION must already exist."],
                ['dontrelease', 'R', "Useful if you want to customize a release before putting it in your Release directory."]]


def main():
    try:
        opts = Options()
        opts.parseOptions()
    except usage.UsageError, ue:
        print "%s: %s" % (sys.argv[0], ue)
        sys.exit(2)

    if not opts.opts['version']:
        print "Please specify a version."
        sys.exit(2)

    from twisted import copyright
    if opts.opts['version'] != copyright.version:
        print '''Error: the version you passed in is not the same as copyright.version:
        -v %s, copyright.version %s''' % (opts.opts['version'], copyright.version)
        print "Please make sure you've updated the README, the ChangeLog, and copyright.py!"
        sys.exit(2)

    if opts.opts['onlydocs']:
        makeDocs(opts)
        return

    makeDist(opts)
               
    if not opts.opts['nodocs']:
        makeDocs(opts)

    makeBalls(opts)

    if not opts.opts['dontrelease']:
        release(opts)




def makeDist(opts):
    ver = opts.opts['version']
    source = opts.opts['source']

    print "MAKING DIST"
    
    if os.path.exists("Twisted-%s" % ver):
        print "Twisted-%s" % ver,"exists already!"
        sys.exit(2)

    print "Copying %s to %s..." % (source, "Twisted-%s" % ver)
    shutil.copytree(source, "Twisted-%s" % ver)


    #shwack the crap
#    print "Stripping *~, *.pyc, *.rpl, *.tap..."
#    for x in ['*~', '*.pyc', '*.rpl', '*.tap', '.cvsignore', '.#*', '*.log']:
#        os.system('find Twisted-%s -name "%s" | xargs rm -f' % (ver, x))

#    print "Stripping 'CVS' directories..."
#    os.system('find Twisted-%s -name CVS | xargs rm -rf' % ver)


def makeDocs(opts):
    print "MAKING DOCS"
    ver = opts.opts['version']
    if not os.path.exists('Twisted-%s' % ver):
        print "Twisted-%s doesn't exist!" % ver
        sys.exit(2)
        
    print "HappyDoc, here we come..."
    os.system('happydoc --author="Glyph Lefkowitz <glyph@twistedmatrix.com>" '
              '--no_comments -t "Twisted Documentation" Twisted-%s > /dev/null' % ver)



    


def makeBalls(opts):
    ver = opts.opts['version']
    doc = 1
    print "MAKING BALLS"

    if not os.path.exists('Twisted-%s' % ver):
        print "Couldn't find Twisted-%s" % ver
        return


    print "Moving out the documentation.."
    os.system('mv Twisted-%s/doc TwistedDocs-%s' % ((ver,)*2))


    ##
    # NoDocs
    ##
    print "Tarring up dist!"
    map(lambda x: os.system(x % ((ver,)*2)),
        ['tar czf Twisted_NoDocs-%s.tar.gz Twisted-%s',
         'tar cjf Twisted_NoDocs-%s.tar.bz2 Twisted-%s',
         'zip -9 -r Twisted_NoDocs-%s.zip Twisted-%s > /dev/null'])


    if not os.path.exists('doc'):#we didn't do the docs
        print "Not doing documentation."
        return
    
    print "Creating TwistedDocs"
    os.system('mv doc/* TwistedDocs-%s/api' % ver)
    os.system('rmdir doc')

    ##
    # TwistedDocs
    ##
    print "Tarring up documentation!"
    map(lambda x: os.system(x % ((ver,)*2)),
        ['tar czf TwistedDocs-%s.tar.gz TwistedDocs-%s',
         'tar cjf TwistedDocs-%s.tar.bz2 TwistedDocs-%s',
         'zip -9 -r TwistedDocs-%s.zip TwistedDocs-%s > /dev/null'])
    
    
    print "putting documentation back"
    os.system('mkdir Twisted-%s/doc; mv TwistedDocs-%s/* Twisted-%s/doc' % ((ver,)*3))


    ##
    # Fullball
    ##
    print "Making Full Tarballs!"
    map(lambda x: os.system(x % ((ver,)*2)),
        ['tar czf Twisted-%s.tar.gz Twisted-%s',
         'tar cjf Twisted-%s.tar.bz2 Twisted-%s',
         'zip -9 -r Twisted-%s.zip Twisted-%s > /dev/null'])
    



def release(opts):
    rel = opts.opts['release']
    ver = opts.opts['version']

    print "RELEASING"

    if not os.path.exists(rel):
        print "Creating", rel
        os.mkdir(rel)

    if not os.path.exists("%s/old" % rel):
        print "creating %s/old" % rel
        os.mkdir("%s/old" % rel)

    print "Copying the NoDocs-Balls!"
    os.system('mv %s/*.tar.gz %s/*.zip %s/old' % ((rel,)*3))

    map(lambda x: shutil.copy(x % ver, rel),
        ['Twisted_NoDocs-%s.tar.gz',
         'Twisted_NoDocs-%s.tar.bz2',
         'Twisted_NoDocs-%s.zip'])


    if os.path.exists('TwistedDocs-%s.tar.gz' % ver):
        print "Copying the Docs-Balls!"
        map(lambda x: shutil.copy(x % ver, rel),
            ['TwistedDocs-%s.tar.gz',
             'TwistedDocs-%s.tar.bz2',
             'TwistedDocs-%s.zip'])
    else:
        print "not copying DocsBall"

    if os.path.exists('Twisted-%s.tar.gz' % ver):
        print "Copying the Full-Balls!"
        map(lambda x: shutil.copy(x % ver, rel),
            ['Twisted-%s.tar.gz',
             'Twisted-%s.tar.bz2',
             'Twisted-%s.zip'])
    else:
        print "not copying FullBall."

if __name__=='__main__':
    main()
