#!/usr/bin/env python

# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


from __future__ import nested_scopes

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string, time, glob
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

from twisted.python import usage, util, failure, dist
from twisted.python.release import replaceInFile, runChdirSafe, sh, CommandFailed, DirectoryExists, DirectoryDoesntExist

import shutil, re

repourl = 'svn+ssh://svn.twistedmatrix.com/svn/Twisted'
#repourl = 'file:///home/radix/Twisted.repo'
trunkurl = repourl + '/trunk'

debug = False

class Options(usage.Options):
    optParameters = [
        ['base-version', None, None,
         "(required) The BASE of the version of this release"],
        ['commands', None, None,
         "(optional) The individual steps to run; You should only use "
         "this if something broke"],
        ]
    optParameters += [[x+'-version', None, None, x+" version"]
                        for x in dist.twisted_subprojects]

    optFlags = [
        ['nopermanent', None,
         "Don't do anything permanent: finalize tags, upload tarballs, etc."]]

    def postOptions(self):

        self['wipurl'] = '%s/branches/wip-%s' % (repourl,
                                                 self['base-version'])
        self['tagurl'] = '%s/tags/release-%s' % (repourl,
                                                 self['base-version'])
        self['temptagurl'] = '%s/tags/temp-%s' % (repourl, self['base-version'])

        commands = []
        if self['commands'] is not None:
            commands = self['commands'].split(',')
            # heh heh
            commands = [globals()[x] for x in commands]

        else:
            ## infer commands to run ##

            # This code expresses the high-level workflow of the
            # release procedure.
            # BRANCH, CHECKOUT, MUNGE (cough), COMMIT, TAG, EXPORT,
            # TARBALL, RELEASE, FINALIZE

            commands += [
                copyTrunkToWIP,
                checkoutWIP,
                updateVersion,
                tagTemp,
                exportTemp,
                ]

            if not self['nopermanent']:
                commands += [
                    finalizeTag,
                    ]

        self['commands'] = commands

        print "GOING TO DO", ','.join([x.__name__ for x in commands])


def main():
    try:
        opts = Options()
        opts.parseOptions()
    except usage.UsageError, ue:
        print "%s: %s (see --help)" % (sys.argv[0], ue)
        sys.exit(2)

    for command in opts['commands']:
        print
        print command.__name__
        print "="*len(command.__name__)
        f = runChdirSafe(command, opts)


##
# The MEAT.
##

def copyTrunkToWIP(opts):
    try:
        sh('svn ls %s' % opts['wipurl'])
    except CommandFailed:
        pass
    else:
        sh('svn rm -m "Removing wip-%s in order to re-copy from trunk" %s'
           % (opts['base-version'], opts['wipurl']))

    sh('svn cp -m "Copying trunk to wip-%s branch." %s %s'
       % (opts['base-version'], trunkurl, opts['wipurl']))


checkoutdir = 'Twisted.exp'

def checkoutWIP(opts):
    if os.path.exists(checkoutdir):
        raise DirectoryExists("CheckoutWIP: %s (--root) already exists"
                              % checkoutdir)

    sh('svn co %s %s' % (opts['wipurl'], checkoutdir))

    
def updateVersion(opts):
    oldver = 'SVN-trunk'
    newver = opts['base-version']

    r = checkoutdir
    files = ('twisted/topfiles/README', 
             'twisted/copyright.py', 'admin/twisted.spec')
    for file in files:
        replaceInFile(os.path.join(r, file), oldver, newver)
        cmd = 'cd %s && svn diff %s' % (r, file)
        print '--$', cmd
        crapout = os.popen(cmd).read()
        print "diff output:"
        print crapout
        if not crapout:
            raise Exception("No diff output!")
    sh('cd %s &&  svn commit -m "Setting version for %s" %s'
       % (r, newver, ' '.join(files)))


def tagTemp(opts):
    sh('cd %s &&  svn cp %s %s -m "Tagging preliminary %s"'
       % (checkoutdir, opts['wipurl'],
          opts['temptagurl'], opts['base-version']),
       )


def exportTemp(opts):
    if os.path.exists('Twisted.exp'):
        raise DirectoryExists("ExportTemp: 'Twisted.exp' already exists")
    sh('svn export %s Twisted.exp' % (opts['temptagurl'],))


def lore(ver, docdir):
    sh("./bin/lore/lore -p --config template=doc/core/howto/template.tpl "
       "--config ext=.html --config version=%(ver)s -l ../howto/ "
       "%(docdir)s/*.xhtml" % {'ver': ver, 'docdir': docdir})


def makeDocsCore(opts):
    ver = opts['base-version']
    os.chdir('Twisted.exp')

    for docdir in ['howto', 'howto/tutorial', 'howto/policy',
                   'specifications', 'vision']:
        lore(ver, os.path.join('doc/core', docdir))

    #shwack the crap

def makeMakeDoc(projname):
    def makeDoc(opts):
        os.chdir('Twisted.exp')
        base = 'doc/%s' % (projname,)
        for sub in ('howto', 'examples'):
            sub = os.path.join(base, sub)
            if os.path.exists(sub):
                lore(opts['%s-version' % projname], sub)
    return makeMakeDoc

makeDocConch = makeMakeDoc('conch')
makeDocFlow = makeMakeDoc('flow')
makeDocLore = makeMakeDoc('lore')
makeDocMail = makeMakeDoc('mail')
makeDocNames = makeMakeDoc('names')
makeDocNews = makeMakeDoc('news')
makeDocPair = makeMakeDoc('pair')
makeDocRunner = makeMakeDoc('runner')
makeDocWeb = makeMakeDoc('web')
makeDocWeb2 = makeMakeDoc('web2')
makeDocWords = makeMakeDoc('words')
makeDocXish = makeMakeDoc('xish')


def tar(tdir):
    sh('find Twisted.exp -name "*.pyc" | xargs rm -f')
    sh('tar cjhf %(tdir)s.tar.bz2 %(tdir)s' % locals())

def makeBallCore(opts):
    ver = opts['base-version']
    tdir = "Twisted-%s" % (ver,)
    if not os.path.exists('Twisted.exp'):
        raise DirectoryDoesntExist("MakeBalls: Twisted.exp doesn't exist")


    os.makedirs(os.path.join(tdir, 'twisted'))
    os.makedirs(os.path.join(tdir, 'bin'))
    
    twisted_subprojects = ','.join(dist.twisted_subprojects)

    sh('''
    ln -s `pwd`/Twisted.exp/twisted/* %(tdir)s/twisted/
    rm -f %(tdir)s/twisted/{%(twisted_subprojects)s}
    rm -f %(tdir)s/twisted/topfiles
    ln -s `pwd`/Twisted.exp/LICENSE %(tdir)s/
    ln -s `pwd`/Twisted.exp/twisted/topfiles/* %(tdir)s/
    ln -s `pwd`/Twisted.exp/doc/core %(tdir)s/doc
    ln -s `pwd`/Twisted.exp/bin/* %(tdir)s/bin
    rm -f %(tdir)s/bin/{%(twisted_subprojects)s}
    ''' % locals())
    tar(tdir)


def makeBallSumo(opts):
    ver = opts['base-version']
    tdir = "TwistedSumo-%s" % (ver,)
    if not os.path.exists('Twisted.exp'):
        raise DirectoryDoesntExist("MakeBalls: Twisted.exp doesn't exist")
                                  

    os.makedirs(tdir)
    sh('''
    ln -s `pwd`/Twisted.exp/bin %(tdir)s/
    ln -s `pwd`/Twisted.exp/twisted %(tdir)s/
    ln -s `pwd`/Twisted.exp/doc %(tdir)s/
    ln -s `pwd`/Twisted.exp/README %(tdir)s/
    ln -s `pwd`/Twisted.exp/LICENSE %(tdir)s/
    ln -s `pwd`/Twisted.exp/setup.py %(tdir)s/
    ''' % locals())

    tar(tdir)


def createSubprojectDirectory(proj, version):
    sdir = 'Twisted%s-%s' % (proj.capitalize(), version)
    os.makedirs(sdir+'/twisted/%s' % (proj,))
    sh('''
    ln -s `pwd`/Twisted.exp/twisted/%(proj)s/* %(sdir)s/twisted/%(proj)s
    rm %(sdir)s/twisted/%(proj)s/topfiles
    rm %(sdir)s/twisted/%(proj)s/__init__.py
    cp `pwd`/Twisted.exp/twisted/%(proj)s/__init__.py %(sdir)s/twisted/%(proj)s/
    ln -s `pwd`/Twisted.exp/LICENSE %(sdir)s
    ln -s `pwd`/Twisted.exp/twisted/%(proj)s/topfiles/* %(sdir)s
    rm %(sdir)s/setup.py
    cp `pwd`/Twisted.exp/twisted/%(proj)s/topfiles/setup.py %(sdir)s/
    ''' % locals())
    replaceInFile(os.path.join(sdir, 'setup.py'),
                  'SVN-Trunk', version)
    replaceInFile(os.path.join(sdir, 'twisted', proj, '__init__.py'),
                  'SVN-Trunk', version)
    if os.path.exists('Twisted.exp/doc/'+proj):
        sh('ln -s `pwd`/Twisted.exp/doc/%(proj)s %(sdir)s/doc' % locals())
    if os.path.exists('Twisted.exp/bin/'+proj):
        sh('ln -s `pwd`/Twisted.exp/bin/%(proj)s %(sdir)s/bin' % locals())


def makeMakeBall(proj):
    def makeBall(opts):
        ver = opts['base-version']
        tdir = "Twisted-%s" % (ver,)
        projver = opts[proj+'-version']
        if not projver:
            raise "NEED --%s-version!" % (proj,)
        projdir = 'Twisted%s-%s' % (proj.capitalize(), projver,)
        createSubprojectDirectory(proj, projver)
        tar(projdir)
    return makeBall


makeBallConch = makeMakeBall('conch')
makeBallFlow = makeMakeBall('flow')
makeBallLore = makeMakeBall('lore')
makeBallMail = makeMakeBall('mail')
makeBallNames = makeMakeBall('names')
makeBallNews = makeMakeBall('news')
makeBallPair = makeMakeBall('pair')
makeBallRunner = makeMakeBall('runner')
makeBallWeb = makeMakeBall('web')
makeBallWeb2 = makeMakeBall('web2')
makeBallWords = makeMakeBall('words')
makeBallXish = makeMakeBall('xish')

def finalizeTag(opts):
    sh('svn mv -m "Finalizing release of %s" %s %s'
       % (opts['base-version'], opts['temptagurl'], opts['tagurl']))

if __name__=='__main__':
    main()

