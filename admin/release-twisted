#!/usr/bin/env python

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import nested_scopes

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

#
# The Twisted release script. This is terribly unix-centric.
#

from twisted.python import usage

import string, os, shutil

class Options(usage.Options):
    optParameters = [['version', 'v', None, "The version of this release."],
                     ['release', 'r', os.path.expanduser('~/Releases'), "The directory where your Twisted release archive is (only relevant for --rel)."],
                     ['cvsroot', 'c', '/cvs', 'The CVSROOT to export from. (only revelant for --exp).']]


    longdesc = "Specify -v and all steps to execute; if no steps are given, default is '--exp --dist --docs --balls --rel'"
    
    def __init__(self):
        usage.Options.__init__(self)
        self['commands'] = []

    def opt_exp(self):
        """Exports Twisted from cvsroot as given with -c.
        Reqs: release-$ver has been tagged."""
        self['commands'].append('exp')
        
    def opt_dist(self):
        """Copies and prepares a Twisted directory for distribution.
        Reqs: 'Twisted' exists, 'Twisted-$ver' doesn't."""
        self['commands'].append('dist')

    def opt_docs(self):
        """Generate documentation.
        Reqs: Twisted-$ver exists."""
        self['commands'].append('docs')

    def opt_balls(self):
        """Creates tarballs.
        Reqs: Twisted-$ver exists."""
        self['commands'].append('ball')

    def opt_rel(self):
        """Copies tarballs to ~/Releases.
        Reqs: Tarballs."""
        self['commands'].append('rel')
        

def main():
    try:
        opts = Options()
        opts.parseOptions()
    except usage.UsageError, ue:
        print "%s: %s" % (sys.argv[0], ue)
        sys.exit(2)

    if not opts['version']:
        print "Please specify a version."
        sys.exit(2)

    from twisted import copyright
    if opts['version'] != copyright.version:
        print '''Error: the version you passed in is not the same as copyright.version:
        -v %s, copyright.version %s''' % (opts['version'], copyright.version)
        print "Please make sure you've updated the README, the ChangeLog, and copyright.py!"
        sys.exit(2)

    if not opts['commands']:
        opts['commands'] = ['exp', 'dist', 'docs', 'balls', 'rel']

    d = {'exp': exportCVS,
         'docs': makeDocs,
         'dist': copyDist,
         'rel': release,
         'balls': makeBalls}

    for command in opts['commands']:
        d[command](opts)


def exportCVS(opts):
    root = opts['cvsroot']
    ver = opts['version']
    os.system('cvs -d%s export -r release-%s Twisted' % (root, ver.replace('.', '_')))

def copyDist(opts):
    ver = opts['version']

    tdir = "Twisted-%s" % ver
    
    print "copyDist: Copying %s to %s." % ('Twisted', tdir)
    
    if os.path.exists(tdir):
        print "copyDist: %s exists already." % tdir
        sys.exit(2)

    shutil.copytree('Twisted', tdir)

    #shwack the crap
    print "copyDist: Stripping *.pyc, .cvsignore"
    for x in ['*.pyc', '.cvsignore']:
        os.system('find %s -name "%s" | xargs rm -f' % (tdir, x))



def makeDocs(opts):
    ver = opts['version']
    tdir = "Twisted-%s" % ver
    if not os.path.exists('%s' % tdir):
        print "makeDocs: %s doesn't exist!" % tdir
        sys.exit(2)
        
    print "makeDocs: HappyDoc."
    os.system('happydoc --author="Glyph Lefkowitz <glyph@twistedmatrix.com>" '
              '--no_comments -t "Twisted Documentation" %s > /dev/null' % tdir)

    print "makeDocs: generate-domdocs."
    os.chdir("%s" % tdir)
    os.system('./admin/generate-domdocs -v %s' % ver)
    os.system('./admin/generate-domdocs -v %s --docsdir doc/specifications' % ver)
    os.chdir("..")
    


def makeBalls(opts):
    ver = opts['version']
    tdir = "Twisted-%s" % ver
    
    if not os.path.exists(tdir):
        print "makeBalls: Couldn't find %s" % tdir
        return

    ##
    # NoDocs
    ##
    print "makeBalls: Moving out the documentation for NoDocs."
    os.system('mv %s/doc TwistedDocs-%s' % (tdir, ver))
    print "makeBalls: Twisted_NoDocs."
    map(lambda x: os.system(x % (ver, tdir)),
        ['tar czf   Twisted_NoDocs-%s.tar.gz  %s',
         'tar cjf   Twisted_NoDocs-%s.tar.bz2 %s',
         'zip -9 -r Twisted_NoDocs-%s.zip     %s > /dev/null'])


    if not os.path.exists('doc'):#we didn't do the docs
        print "makeBalls: Not continuing: `doc' not found."
        return
    
    ##
    # TwistedDocs
    ##
    print "makeBalls: TwistedDocs"
    os.system('mv doc/* TwistedDocs-%s/api' % ver)
    os.system('rmdir doc')

    map(lambda x: os.system(x % ((ver,)*2)),
        ['tar czf   TwistedDocs-%s.tar.gz  TwistedDocs-%s',
         'tar cjf   TwistedDocs-%s.tar.bz2 TwistedDocs-%s',
         'zip -9 -r TwistedDocs-%s.zip     TwistedDocs-%s > /dev/null'])
    
    
    ##
    # Fullball
    ##
    print "makeBalls: Twisted"
    os.system('mkdir %s/doc; mv TwistedDocs-%s/* %s/doc' % (tdir, ver, tdir))
    map(lambda x: os.system(x % (tdir, tdir)),
        ['tar czf   %s.tar.gz  %s',
         'tar cjf   %s.tar.bz2 %s',
         'zip -9 -r %s.zip     %s > /dev/null'])
    



def release(opts):
    rel = opts['release']
    ver = opts['version']
    tdir = "Twisted-%s" % ver

    if not os.path.exists(rel):
        print "release: Creating", rel
        os.mkdir(rel)

    if not os.path.exists("%s/old" % rel):
        print "release: creating %s/old" % rel
        os.mkdir("%s/old" % rel)

    print "release: Moving old releases to %s/old" % rel
    os.system('mv %s/*.tar.gz %s/*.zip %s/old' % ((rel,)*3))

    print "release: Copying Twisted_NoDocs."
    map(lambda x: shutil.copy(x % ver, rel),
        ['Twisted_NoDocs-%s.tar.gz',
         'Twisted_NoDocs-%s.tar.bz2',
         'Twisted_NoDocs-%s.zip'])


    if os.path.exists('TwistedDocs-%s.tar.gz' % ver):
        print "release: Copying TwistedDocs."
        map(lambda x: shutil.copy(x % ver, rel),
            ['TwistedDocs-%s.tar.gz',
             'TwistedDocs-%s.tar.bz2',
             'TwistedDocs-%s.zip'])
    else:
        print "release: Not Copying TwistedDocs."

    if os.path.exists('%s.tar.gz' % tdir):
        print "release: Copying Twisted."
        map(lambda x: shutil.copy(x % tdir, rel),
            ['%s.tar.gz',
             '%s.tar.bz2',
             '%s.zip'])
    else:
        print "release: Not copying Twisted."

if __name__=='__main__':
    main()
