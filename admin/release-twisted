#!/usr/bin/env python

# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


from __future__ import nested_scopes

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

from twisted.python import usage, util, failure, dist
from twisted.python.release import runChdirSafe, sh, CommandFailed, DirectoryExists, DirectoryDoesntExist

import time, glob

packaged_projects = dist.twisted_subprojects[:]
packaged_projects.remove('web2')


repourl = 'svn+ssh://svn.twistedmatrix.com/svn/Twisted'
#repourl = 'file:///home/radix/Twisted.repo'

## NOTE: This script currently doesn't deal too well with building
## subprojects alone, at least in its dealings with SVN.

# FIXME:
# 1. Don't use the core-version in the tag name; it doesn't make sense
#    when doing subprojects alone...
# 2. If we ever do a sumo release on the same day, the version will
#    conflict, since we just use %Y-%m-%d as the version...
# 3. Can't generate tarball from a particular tag without exporting it
#    beforehand.


# OK I know this sucks but HOW ABOUT THIS When making a SUMO ball, you
# say "give me project X from dir A and project Y from dir B!  Damn
# but that will be a very verbose way of doing things. Well, maybe not
# really in practice, if we map it somehow like

# {A: ['core'],
#  B: ['conch', 'words', 'etc']}

# Parameterising the release-tag would fix #1 and #3.

def makeCommands():
    # Yeah, I could do dynamic lookups and for loops and shit, but
    # this makes the code greppable.
    return {
        'exportTemp': exportTemp,
        'makeDocAll': makeDocAll,
        'makeDocCore': makeDocCore,
        'makeBallAll': makeBallAll,
        'makeBallCore': makeBallCore,
        'makeBallSumo': makeBallSumo,
        'finalizeTag': finalizeTag,

        'makeDocConch': makeMakeDoc('conch'),
        'makeDocFlow': makeMakeDoc('flow'),
        'makeDocLore': makeMakeDoc('lore'),
        'makeDocMail': makeMakeDoc('mail'),
        'makeDocNames': makeMakeDoc('names'),
        'makeDocNews': makeMakeDoc('news'),
        'makeDocPair': makeMakeDoc('pair'),
        'makeDocRunner': makeMakeDoc('runner'),
        'makeDocWeb': makeMakeDoc('web'),
        'makeDocWeb2': makeMakeDoc('web2'),
        'makeDocWords': makeMakeDoc('words'),
        'makeDocXish': makeMakeDoc('xish'),

        'makeBallConch': makeMakeBall('conch'),
        'makeBallFlow': makeMakeBall('flow'),
        'makeBallLore': makeMakeBall('lore'),
        'makeBallMail': makeMakeBall('mail'),
        'makeBallNames': makeMakeBall('names'),
        'makeBallNews': makeMakeBall('news'),
        'makeBallPair': makeMakeBall('pair'),
        'makeBallRunner': makeMakeBall('runner'),
        'makeBallWeb': makeMakeBall('web'),
        'makeBallWeb2': makeMakeBall('web2'),
        'makeBallWords': makeMakeBall('words'),
        'makeBallXish': makeMakeBall('xish'),
        }


class Options(usage.Options):
    optParameters = [
        ['core-version', None, None,
         "(required) Twisted Core version"],
        ['commands', None, None,
         "(optional) Comma-separated list of individual steps to run"],
        ['release-source', None, '/trunk',
         "SVN path to be released."]
        ]
    optParameters += [[x+'-version', None, None, x+" version"]
                        for x in dist.twisted_subprojects]

    optFlags = [
        ['nopermanent', None,
         "Don't do anything permanent: finalize tags, upload tarballs, etc."]]

    _desc = """\
--commands available are:

%s

Generally, the release manager will want to run this from a checkout
of a branch of Twisted that has been given version numbers with
admin/change-versions.
"""

    longdesc = property(lambda s: s._desc
                        % ', '.join(sorted(ALL_COMMANDS)))

    def postOptions(self):
        self['release-url'] = repourl + self['release-source'] or '/trunk'
        self['tagurl'] = '%s/tags/release-%s' % (repourl,
                                                 self['core-version'])
        self['temptagurl'] = '%s/tags/temp-%s' % (repourl,
                                                  self['core-version'])

        commands = []
        if self['commands'] is not None:
            commands = self['commands'].split(',')
            # heh heh
            commands = [ALL_COMMANDS[x] for x in commands]

        else:
            ## infer commands to run ##

            commands += [
                exportTemp,
                makeDocAll,
                makeBallAll,
                makeBallSumo,
                ]

            if not self['nopermanent']:
                commands += [
                    finalizeTag,
                    ]

        self['commands'] = commands

        print "GOING TO DO", ','.join([x.__name__ for x in commands])


def main():
    try:
        opts = Options()
        opts.parseOptions()
    except usage.UsageError, ue:
        print "%s: %s (see --help)" % (sys.argv[0], ue)
        sys.exit(2)

    for command in opts['commands']:
        print
        print command.__name__
        print "="*len(command.__name__)
        runChdirSafe(command, opts)

##
# Utilities
##
def lore(ver, docdir):
    sh("./bin/lore/lore -p --config template=doc/core/howto/template.tpl "
       "--config ext=.html --config version=%(ver)s "
       "--config noapi=please -l ../howto/ "
       "%(docdir)s/*.xhtml" % {'ver': ver, 'docdir': docdir})
    sh("rm -f %(docdir)s/*.xhtml" % {'docdir': docdir})

def tar(tdir):
    sh('find Twisted.exp %(tdir)s -name "*.pyc" | xargs rm -f' % locals())
    sh('tar cjhf %(tdir)s.tar.bz2 %(tdir)s' % locals())


##
# The MEAT.
##

def exportTemp(opts):
    if os.path.exists('Twisted.exp'):
        raise DirectoryExists("ExportTemp: 'Twisted.exp' already exists")
    sh('svn export . Twisted.exp')


def makeDocCore(opts):
    ver = opts['core-version']
    os.chdir('Twisted.exp')

    for docdir in ['howto', 'howto/tutorial', 'howto/policy', 'upgrades',
                   'examples',
                   'upgrades/2.0', # ugh
                   'specifications', 'vision', '']:
        lore(ver, os.path.join('doc/core', docdir))

    #shwack the crap

def makeMakeDoc(projname):
    def makeDoc(opts):
        os.chdir('Twisted.exp')
        base = 'doc/%s' % (projname,)
        for sub in ('howto', 'examples'):
            sub = os.path.join(base, sub)
            if os.path.exists(sub):
                lore(opts['%s-version' % projname], sub)
    return makeDoc


def makeDocAll(opts):
    runChdirSafe(makeDocCore, opts)
    for sub in packaged_projects:
        runChdirSafe(ALL_COMMANDS['makeDoc%s' % sub.capitalize()],
                     opts)

def makeBallAll(opts):
    runChdirSafe(makeBallCore, opts)
    for sub in packaged_projects:
        runChdirSafe(ALL_COMMANDS['makeBall%s' % sub.capitalize()],
                     opts)


def makeBallCore(opts):
    ver = opts['core-version']
    tdir = "Twisted-%s" % (ver,)
    if not os.path.exists('Twisted.exp'):
        raise DirectoryDoesntExist("MakeBalls: Twisted.exp doesn't exist")

    os.makedirs(os.path.join(tdir, 'twisted'))
    os.makedirs(os.path.join(tdir, 'bin'))

    twisted_subprojects = ','.join(dist.twisted_subprojects)

    sh('''
    ln -s `pwd`/Twisted.exp/twisted/* %(tdir)s/twisted/
    rm -f %(tdir)s/twisted/{%(twisted_subprojects)s}
    rm -f %(tdir)s/twisted/topfiles
    ln -s `pwd`/Twisted.exp/LICENSE %(tdir)s/
    ln -s `pwd`/Twisted.exp/twisted/topfiles/* %(tdir)s/
    mkdir %(tdir)s/doc
    ln -s `pwd`/Twisted.exp/doc/core/* %(tdir)s/doc/
    ln -s `pwd`/Twisted.exp/doc/fun %(tdir)s/doc/fun
    ln -s `pwd`/Twisted.exp/bin/* %(tdir)s/bin
    rm -f %(tdir)s/bin/{%(twisted_subprojects)s}

    ''' % locals())
##     # we want copies so we can replace versions
##     rm %(tdir)s/README %(tdir)s/setup.py
##     cp `pwd`/Twisted.exp/twisted/topfiles/setup.py %(tdir)s/
##     cp `pwd`/Twisted.exp/twisted/topfiles/README %(tdir)s/
##     rm %(tdir)s/twisted/__init__.py %(tdir)s/twisted/copyright.py
##     cp `pwd`/Twisted.exp/twisted/__init__.py %(tdir)s/twisted/
##     cp `pwd`/Twisted.exp/twisted/copyright.py %(tdir)s/twisted/
##     replaceMe = {'SVN-Trunk': ver}
##     replaceInFile(os.path.join(tdir, 'setup.py'), replaceMe)
##     replaceInFile(os.path.join(tdir, 'README'), replaceMe)
##     replaceInFile(os.path.join(tdir, 'twisted', '__init__.py'),
##                   replaceMe)
##     replaceInFile(os.path.join(tdir, 'twisted', 'copyright.py'),
##                   replaceMe)
    tar(tdir)


def makeBallSumo(opts):
    ver = time.strftime('%Y-%m-%d')
    basever = opts['core-version']
    tdir = "TwistedSumo-%s" % (ver,)
    # # # OMFG this is going to be horrible but we need to pull in
    # # # subprojects from various SVN branches here. It needs to know
    # # # how to pull all the relevant files from each individual
    # # # project. i.e., get words from release-2.0.0 means
    # # # r-2/twisted/words *AND*
    # # # r-2/twisted/plugins/twisted_words.py. I will probably have
    # # # to parse setup.py of that project to figure out what plugins
    # # # to include. !!!!!!!!!!
    if not os.path.exists('Twisted.exp'):
        raise DirectoryDoesntExist("MakeBalls: Twisted.exp doesn't exist")
    zig = glob.glob('ZopeInterface-*.tgz')
    if not zig:
        raise Exception(
            "Creating sumo distribution rquires a ZopeInterface tarball - "
            "Please download one from <http://www.zope.org/Products/ZopeInterface>.")
    zi = zig[0]
    os.makedirs(tdir)
    sh('''
    ln -s `pwd`/Twisted.exp/bin %(tdir)s/
    cp -r `pwd`/Twisted.exp/twisted %(tdir)s/
    rm -rf `pwd`/Twisted.exp/twisted/web2 # XXX
    ln -s `pwd`/Twisted.exp/doc %(tdir)s/
    cp    `pwd`/Twisted.exp/README %(tdir)s/
    ln -s `pwd`/Twisted.exp/LICENSE %(tdir)s/
    ln -s `pwd`/Twisted.exp/setup.py %(tdir)s/
    ln -s `pwd`/%(zi)s %(tdir)s/
    ''' % locals())
##     # SUMO README references all subproject versions
##     sumoReplace = {'SUMO-Date': ver,
##                    'Core-SVN-Trunk': opts['core-version']}
##     for subproj in packaged_projects:
##         subver = opts['%s-version' % subproj]
##         if not subver:
##             raise Exception("You need to pass --proj-version for all "
##                             "subprojects when building sumo! including %s"
##                             % subproj)
##         sumoReplace['%s-SVN-Trunk' % subproj.capitalize()] = subver

##     replaceInFile(os.path.join(tdir, 'README'), sumoReplace)
##     # replace versions for core
##     coreReplace = {'SVN-Trunk': basever}
##     for fn in ('copyright.py', '__init__.py', 'topfiles/README',
##                'topfiles/setup.py'):
##         replaceInFile(os.path.join(tdir, 'twisted', fn), coreReplace)
##     # Replace versions for subproject files
##     for sub in packaged_projects:
##         subReplace = {'SVN-Trunk': opts['%s-version' % sub]}
##         for fn in ('__init__.py', 'topfiles/setup.py', 'topfiles/README'):
##             replaceInFile(os.path.join(tdir, 'twisted', sub, fn), subReplace)
    tar(tdir)


def createSubprojectDirectory(proj, version):
    sdir = 'Twisted%s-%s' % (proj.capitalize(), version)
    os.makedirs(sdir+'/twisted/%s' % (proj,))
    os.makedirs(sdir+'/twisted/plugins')

    sh("""
    ln -s `pwd`/Twisted.exp/twisted/%(proj)s/* %(sdir)s/twisted/%(proj)s
    rm %(sdir)s/twisted/%(proj)s/topfiles
    rm %(sdir)s/twisted/%(proj)s/__init__.py
    cp `pwd`/Twisted.exp/twisted/%(proj)s/__init__.py %(sdir)s/twisted/%(proj)s/
    ln -s `pwd`/Twisted.exp/LICENSE %(sdir)s
    ln -s `pwd`/Twisted.exp/twisted/%(proj)s/topfiles/* %(sdir)s
    """ % locals())
##     # we want copies so we can replace versions
##     rm %(sdir)s/setup.py %(sdir)s/README
##     cp `pwd`/Twisted.exp/twisted/%(proj)s/topfiles/setup.py %(sdir)s/
##     cp `pwd`/Twisted.exp/twisted/%(proj)s/topfiles/README %(sdir)s/
    
    if os.path.exists('Twisted.exp/twisted/plugins/twisted_%s.py' % (proj,)):
        sh("ln -s `pwd`/Twisted.exp/twisted/plugins/twisted_%(proj)s.py "
           "%(sdir)s/twisted/plugins" % locals())
    
##     replaceMe = {'SVN-Trunk': version}
##     replaceInFile(os.path.join(sdir, 'setup.py'), replaceMe)
##     replaceInFile(os.path.join(sdir, 'README'), replaceMe)
##     replaceInFile(os.path.join(sdir, 'twisted', proj, '__init__.py'),
##                   replaceMe)
    if os.path.exists('Twisted.exp/doc/'+proj):
        sh('ln -s `pwd`/Twisted.exp/doc/%(proj)s %(sdir)s/doc' % locals())
    if os.path.exists('Twisted.exp/bin/'+proj):
        sh('ln -s `pwd`/Twisted.exp/bin/%(proj)s %(sdir)s/bin' % locals())


def makeMakeBall(proj):
    def makeBall(opts):
        projver = opts[proj+'-version']
        if not projver:
            raise "NEED --%s-version!" % (proj,)
        projdir = 'Twisted%s-%s' % (proj.capitalize(), projver,)
        createSubprojectDirectory(proj, projver)
        tar(projdir)
    return makeBall


def finalizeTag(opts):
    sh('svn mv -m "Finalizing release of %s" %s %s'
       % (opts['core-version'], opts['temptagurl'], opts['tagurl']),
       prompt=True)


ALL_COMMANDS = makeCommands()

if __name__=='__main__':
    main()

