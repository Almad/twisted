#!/usr/bin/env python

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import nested_scopes

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string, time, glob
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

#
# The Twisted release script. This is terribly unix-centric.
#

from twisted.python import usage, util

import string, os, shutil

# magic for CVS guessing
try:
    defaultRoot = open(util.sibpath(sys.argv[0], 'CVS/Root')).read().strip()
except:
    defaultRoot = None

class Options(usage.Options):
    optParameters = [['version', 'v', None,
                      "The version of this release."],

                     ['oldver', 'o', None,
                      "The previous version to replace with the new version (only works with --upver)"],

                     ['release', 'r', os.path.expanduser('~/Releases'),
                      "The directory where your Twisted release archive is (only relevant for --rel)."],

                     ['cvsroot', 'c', defaultRoot, "The CVSROOT to export from. (only revelant for --exp)."],

                     ['root', 't', 'Twisted.CVS', "The directory that your CVS checkout is."]]

    longdesc = "Specify -v and all steps to execute; if no steps are given, default is '--exp --dist --docs --balls --rel'"
    
    def __init__(self):
        usage.Options.__init__(self)
        self['commands'] = []

    def opt_checkout(self):
        self['commands'].append('checkout')

    def opt_upver(self):
        self['commands'].append('upver')

    def opt_tag(self):
        """`cvs tag -c <version>'s a CVS checkout.
        Reqs: A `Twisted' directory."""
        self['commands'].append('tag')

    def opt_exp(self):
        """Exports Twisted from cvsroot as given with -c.
        Reqs: release-$ver has been tagged."""
        self['commands'].append('exp')
        
    def opt_dist(self):
        """Copies and prepares a Twisted directory for distribution.
        Reqs: 'Twisted' exists, 'Twisted-$ver' doesn't."""
        self['commands'].append('dist')

    def opt_docs(self):
        """Generate documentation.
        Reqs: Twisted-$ver exists."""
        self['commands'].append('docs')

    def opt_balls(self):
        """Creates tarballs.
        Reqs: Twisted-$ver exists."""
        self['commands'].append('balls')

    def opt_rel(self):
        """Copies tarballs to ~/Releases.
        Reqs: Tarballs."""
        self['commands'].append('rel')

    def opt_deb(self):
        """Creates a debian mini-repository in ~/Releases/debian-ver/.
        Reqs: release."""
        self['commands'].append('debian')

    def opt_debug(self):
        global debug
        debug = 1

    opt_d = opt_debug

def main():
    try:
        opts = Options()
        opts.parseOptions()
    except usage.UsageError, ue:
        print "%s: %s" % (sys.argv[0], ue)
        sys.exit(2)

    if not opts['version']:
        print "Please specify a version."
        sys.exit(2)

    if not opts['commands']:
        opts['commands'] = ['upver', 'tag', 'exp', 'dist', 'docs', 'balls', 'rel', 'debian']

    d = {'exp': exportCVS,
         'docs': makeDocs,
         'dist': copyDist,
         'rel': release,
         'balls': makeBalls,
		 'tag': tag,
         'upver': updateVersions,
         'checkout': checkout,
         'debian': makeDebs}

    
    sys.path.insert(0, os.path.abspath('Twisted'))
    print "going to do", opts['commands']
    for command in opts['commands']:
        d[command](opts)

debug = 0

def sh(command, sensitive=0):
    if debug or sensitive:
        if raw_input("%r ?? " % command).startswith('n'):
            return
    os.system(command)

        
def replaceInFile(filename, oldstr, newstr):
    sh("sed -e 's/%s/%s/' < %s > %s.new" % (oldstr, newstr, filename, filename))
    sh('mv %s.new %s' % (filename,  filename))

def checkout(opts):
    print "checkout"
    root = opts['cvsroot']
    sh('cvs -d %s co Twisted' % (root))
    sh('mv Twisted %s' % opts['root'])

def updateVersions(opts):
    print "updateVersions"
    from twisted.copyright import version
    oldver = version # version.replace('.', '_')
    newver = opts['version']
   
    r = opts['root']
    files = ('%s/README' % r, '%s/doc/howto/installing-twisted.html' % r, '%s/twisted/copyright.py' % r)
    for file in files:
        replaceInFile(file, oldver, newver)
    sh('cd %s; cvs -q diff' % (r))
    sh('cd %s; cvs commit -m "Preparing for %s" %s' % (r, newver, ' '.join(files)), 1)


def tag(opts):
    print "tag"
    ver = opts['version']
    sh('cd %s; cvs tag -c release-%s' % (opts['root'], ver.replace('.', '_')), 1)

def exportCVS(opts):
    root = opts['cvsroot']
    ver = opts['version']
    sh('cvs -d%s export -r release-%s Twisted' % (root, ver.replace('.', '_')))


##     from twisted import copyright
##     if opts['version'] != copyright.version:
##         print '''Error: the version you passed in is not the same as copyright.version:
##         -v %s, copyright.version %s''' % (opts['version'], copyright.version)
##         print "Please make sure you've updated the README, the ChangeLog, and copyright.py!"
##         sys.exit(2)

def copyDist(opts):
    ver = opts['version']

    tdir = "Twisted-%s" % ver
    
    print "copyDist: Copying %s to %s." % ('Twisted', tdir)
    
    if os.path.exists(tdir):
        print "copyDist: %s exists already." % tdir
        sys.exit(2)

    shutil.copytree('Twisted', tdir)



def makeDocs(opts):
    ver = opts['version']
    tdir = "Twisted-%s" % ver
    if not os.path.exists('%s' % tdir):
        print "makeDocs: %s doesn't exist!" % tdir
        sys.exit(2)
        
    print "makeDocs: epydoc."
    sh('cd %s; ./admin/epyrun -o doc/api; cp doc/api/tree.html doc/api/index.html' % (tdir))

    print "makeDocs: generate-domdocs."
    sh('cd %s; ./admin/generate-domdocs -v %s' % (tdir, ver))
    sh('cd %s; ./admin/generate-domdocs -v %s --docsdir doc/specifications' % (tdir, ver))
    
    #shwack the crap
    print "copyDist: Stripping *.pyc, .cvsignore"
    for x in ['*.pyc', '.cvsignore']:
        sh('find %s -name "%s" | xargs rm -f' % (tdir, x))



def makeBalls(opts):
    ver = opts['version']
    tdir = "Twisted-%s" % ver
    
    if not os.path.exists(tdir):
        print "makeBalls: Couldn't find %s" % tdir
        return

    ##
    # NoDocs
    ##
    #print "makeBalls: Moving out the documentation for NoDocs."
    #sh('mv %s/doc TwistedDocs-%s' % (tdir, ver))
    
    print "makeBalls: Twisted_NoDocs."
    map(lambda x: sh(x % (tdir, ver, tdir)),
        ['tar --exclude %s/doc czf Twisted_NoDocs-%s.tar.gz  %s',
         'tar --exclude %s/doc cjf Twisted_NoDocs-%s.tar.bz2 %s',
         'zip -x %s/doc      -9 -r Twisted_NoDocs-%s.zip     %s > /dev/null'])


    if not os.path.exists('doc/api/tree.html'):#we didn't do the docs
        print "makeBalls: Not continuing: `doc/api/tree.html' not found."
        return
    

    ##
    # Fullball
    ##
    print "makeBalls: Twisted"
    sh('mkdir %s/doc; mv TwistedDocs-%s/* %s/doc' % (tdir, ver, tdir))
    map(lambda x: sh(x % (tdir, tdir)),
        ['tar czf   %s.tar.gz  %s',
         'tar cjf   %s.tar.bz2 %s',
         'zip -9 -r %s.zip     %s > /dev/null'])


    ##
    # TwistedDocs
    ##
    print "makeBalls: TwistedDocs"
    #sh('cp doc/* TwistedDocs-%s/api' % ver)
    #sh('rmdir doc')

    docdir = "TwistedDocs-%s" % ver
    
    sh(  '''
         cd %(tdir)/doc;
         mv api %(docdir)s
         
         tar czf   %(docdir)s.tar.gz  %(docdir)s;
         mv %(docdir)s.tar.gz ../../;
         
         tar cjf   %(docdir)s.tar.bz2 %(docdir)s;
         mv %(docdir)s.tar.bz2 ../../;
         
         zip -9 -r %(docdir)s.zip %(docdir)s > /dev/null;
         mv %(docdir)s.zip ../../
         ''' % locals())


def release(opts):
    rel = opts['release']
    ver = opts['version']
    tdir = "Twisted-%s" % ver

    if not os.path.exists(rel):
        print "release: Creating", rel
        os.mkdir(rel)

    if not os.path.exists("%s/old" % rel):
        print "release: creating %s/old" % rel
        os.mkdir("%s/old" % rel)

    print "release: Moving old releases to %s/old" % rel
    sh('mv %s/*.tar.gz %s/*.tar.bz2 %s/*.zip %s/old' % ((rel,)*4))

    print "release: Copying Twisted_NoDocs."
    map(lambda x: shutil.copy(x % ver, rel),
        ['Twisted_NoDocs-%s.tar.gz',
         'Twisted_NoDocs-%s.tar.bz2',
         'Twisted_NoDocs-%s.zip'])


    if os.path.exists('TwistedDocs-%s.tar.gz' % ver):
        print "release: Copying TwistedDocs."
        map(lambda x: shutil.copy(x % ver, rel),
            ['TwistedDocs-%s.tar.gz',
             'TwistedDocs-%s.tar.bz2',
             'TwistedDocs-%s.zip'])
    else:
        print "release: Not Copying TwistedDocs."

    if os.path.exists('%s.tar.gz' % tdir):
        print "release: Copying Twisted."
        map(lambda x: shutil.copy(x % tdir, rel),
            ['%s.tar.gz',
             '%s.tar.bz2',
             '%s.zip'])
    else:
        print "release: Not copying Twisted."


def makeDebs(opts):
    rel = opts['release']
    ver = opts['version']
    tgz = os.path.join(rel, 'Twisted-%s.tar.gz' % ver)
    unique = '%s.%s' % (time.time(), os.getpid())
    os.mkdir('/sid-chroot/tmp/%s' % unique)
    os.chdir('/sid-chroot/tmp/%s' % unique)
    sh('tar xzf %s' % tgz)
    sh("ssh -p 9022 localhost "
              "'cd /tmp/%(unique)s;./Twisted-%(ver)s/admin/make-deb -a'"%vars())
    if not os.path.isdir(os.path.join(rel, 'debian-%s' % ver)):
        os.mkdir(os.path.join(rel, 'debian-%s' % ver))
    sys.stdout.write("Moving files to %s" % os.path.join(rel, 'debian-%s'%ver))
    sys.stdout.flush()
    for file in glob.glob('/sid-chroot/tmp/%s/*' % unique):
        sh('cp %(file)s %(rel)s/debian-%(ver)s' % vars())
        sys.stdout.write(".")
        sys.stdout.flush()
    sys.stdout.write("\n")
    os.chdir("%(rel)s/debian-%(ver)s" % vars())
    sh('tar xzf %(tgz)s Twisted-%(ver)s/admin' % vars())
    sh('mv Twisted-%(ver)s/admin/override .' % vars())
    sh('./Twisted-%(ver)s/admin/createpackages override'% vars())
    sh('rm -rf Twisted-%(ver)s' % vars())
    sh('rm -rf /sid-chroot/tmp/%s' % unique)
    

if __name__=='__main__':
    main()
