#!/usr/bin/env python

# Copyright (c) 2001-2004 Twisted Matrix Laboratories.
# See LICENSE for details.


from __future__ import nested_scopes

### Twisted Preamble
# This makes sure that users don't have to set up their environment
# specially in order to run these programs from bin/.
import sys, os, string, time, glob
if string.find(os.path.abspath(sys.argv[0]), os.sep+'Twisted') != -1:
    sys.path.insert(0, os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]), os.pardir, os.pardir)))
sys.path.insert(0, os.curdir)
### end of preamble

from twisted.python import usage, util, failure, dist
from twisted.python.release import replaceInFile, runChdirSafe, sh, CommandFailed, DirectoryExists, DirectoryDoesntExist

import shutil, re

repourl = 'svn+ssh://svn.twistedmatrix.com/svn/Twisted'
#repourl = 'file:///home/radix/Twisted.repo'
trunkurl = repourl + '/trunk'

debug = False

class Options(usage.Options):
    optParameters = [
        ['base-version', None, None,
         "(required) The BASE of the version of this release"],
        ['tinyver', None, None,
         "(optional) The alpha or rc revision."],
        ['commands', None, None,
         "(optional) The individual steps to run; You should only use "
         "this if something broke"],
        ['releasedir', None, '/twisted/Releases',
         "The directory to put tarballs."],
        ['docdir', None, '/twisted/TwistedDocs',
         "The directory to deploy documentation to."],
        ['sfname', None, None,
         "Your username on sourceforge."],
        ]

    optFlags = [
        ['nopermanent', None,
         "Don't do anything permanent: finalize tags, upload tarballs, etc."]]

    def postOptions(self):
        ## assertions ##
        if self['base-version'] is None:
            raise usage.UsageError("--base-version is required!")

        ## set up some convenience ##

        # BRANCH, CHECKOUT, MUNGE (cough), COMMIT, TAG, EXPORT,
        # TARBALL, RELEASE, FINALIZE

        self['wipurl'] = '%s/branches/wip-%s' % (repourl,
                                                 self['base-version'])
        self['tagurl'] = '%s/tags/release-%s' % (repourl,
                                                 self['base-version'])
        self['temptagurl'] = '%s/tags/temp-%s' % (repourl, self['base-version'])

        for x in ['wipurl', 'tagurl']:
            print "%s: %s" % (x, self[x])


        commands = []
        if self['commands'] is not None:
            commands = self['commands'].split(',')
            # heh heh
            commands = [globals()[x] for x in commands]

        else:
            ## infer commands to run ##

            # This code expresses the high-level workflow of the
            # release procedure.

            commands += [
                copyTrunkToWIP,
                checkoutWIP,
                updateVersion,
                tagTemp,
                exportTemp,
                makeDocs,
                makeBalls,
                ]

            if not self['nopermanent']:
                commands += [
                    finalizeTag,
                    releaseBalls,
                    releaseSourceforge,
                    ]
                commands += [updateWebDocs]

        self['commands'] = commands

        print "GOING TO DO", [x.__name__ for x in commands]


def main():
    try:
        opts = Options()
        opts.parseOptions()
    except usage.UsageError, ue:
        print "%s: %s (see --help)" % (sys.argv[0], ue)
        sys.exit(2)

    for command in opts['commands']:
        print "-->", command.__name__
        f = runChdirSafe(command, opts)


##
# The MEAT.
##

def copyTrunkToWIP(opts):
    try:
        sh('svn ls %s' % opts['wipurl'])
    except CommandFailed:
        pass
    else:
        sh('svn rm -m "Removing wip-%s in order to re-copy from trunk" %s'
           % (opts['base-version'], opts['wipurl']))

    sh('svn cp -m "Copying trunk to wip-%s branch." %s %s'
       % (opts['base-version'], trunkurl, opts['wipurl']))


checkoutdir = 'Twisted.exp'

def checkoutWIP(opts):
    if os.path.exists(checkoutdir):
        raise DirectoryExists("CheckoutWIP: %s (--root) already exists"
                              % checkoutdir)

    sh('svn co %s %s' % (opts['wipurl'], checkoutdir))

    
def updateVersion(opts):
    oldver = 'SVN-trunk'
    newver = opts['base-version']

    r = checkoutdir
    files = ('twisted/topfiles/README', 
             'twisted/copyright.py', 'admin/twisted.spec')
    for file in files:
        replaceInFile(os.path.join(r, file), oldver, newver)
        cmd = 'cd %s && svn diff %s' % (r, file)
        print '--$', cmd
        crapout = os.popen(cmd).read()
        print "diff output:"
        print crapout
        if not crapout:
            raise Exception("No diff output!")
    sh('cd %s &&  svn commit -m "Setting version for %s" %s'
       % (r, newver, ' '.join(files)))#, sensitive=1)


def tagTemp(opts):
    sh('cd %s &&  svn cp %s %s -m "Tagging preliminary %s"'
       % (checkoutdir, opts['wipurl'],
          opts['temptagurl'], opts['base-version']),
       )# sensitive=1)


def exportTemp(opts):
    if os.path.exists('Twisted.exp'):
        raise DirectoryExists("ExportTemp: 'Twisted.exp' already exists")
    sh('svn export %s Twisted.exp' % (opts['temptagurl'],))


def lore(ver, docdir):
    sh("./bin/lore/lore -p --config template=doc/core/howto/template.tpl "
       "--config ext=.html --config version=%(ver)s -l ../howto/ "
       "%(docdir)s/*.xhtml" % {'ver': ver, 'docdir': docdir})


def makeDocsCore(opts):
    ver = opts['base-version']
    tdir = 'Twisted.exp'

    os.chdir(tdir)

    for docdir in ['howto', 'howto/tutorial', 'howto/policy',
                   'specifications', 'vision']:
        lore(ver, os.path.join('doc/core', docdir))

    #shwack the crap
    sh('find . -name "*.pyc" | xargs rm -f')


def makeDocsConch(opts):
    os.chdir("Twisted.exp")
    lore(opts['base-version'], 'doc/conch/howto')

def makeBallCore(opts):
    ver = opts['base-version']
    tdir = "Twisted-%s" % (ver,)
    if not os.path.exists('Twisted.exp'):
        raise DirectoryDoesntExist("MakeBalls: Twisted.exp doesn't exist"
                                   % tdir)

    os.makedirs(os.path.join(tdir, 'twisted'))
    os.makedirs(os.path.join(tdir, 'bin'))
    
    twisted_subprojects = ','.join(dist.twisted_subprojects)

    sh('''
    ln -s `pwd`/Twisted.exp/twisted/* %(tdir)s/twisted/
    ln -s `pwd`/Twisted.exp/setup.py %(tdir)s/
    rm -f %(tdir)s/twisted/{%(twisted_subprojects)s}
    rm -f %(tdir)s/twisted/topfiles
    ln -s `pwd`/Twisted.exp/twisted/topfiles/* %(tdir)s/
    ln -s `pwd`/Twisted.exp/doc/core %(tdir)s/doc
    ln -s `pwd`/Twisted.exp/bin/* %(tdir)s/bin
    rm -f %(tdir)s/bin/{%(twisted_subprojects)s}
    ''' % locals())

    sh('tar cjhf %(tdir)s.tar.bz2 %(tdir)s' % locals())


def createSubprojectDirectory(proj, version):
    sdir = 'Twisted%s-%s' % (proj.capitalize(), version)
    os.makedirs(sdir+'/twisted/%s' % (proj,))
    sh('''
    ln -s `pwd`/Twisted.exp/twisted/%(proj)s/* %(sdir)s/twisted/%(proj)s
    rm %(sdir)s/twisted/%(proj)s/topfiles
    ln -s `pwd`/Twisted.exp/twisted/%(proj)s/topfiles/* %(sdir)s
    ''' % locals())
    if os.path.exists('Twisted.exp/doc/'+proj):
        sh('ln -s `pwd`/Twisted.exp/doc/%(proj)s %(sdir)s/doc' % locals())
    if os.path.exists('Twisted.exp/bin/'+proj):
        sh('ln -s `pwd`/Twisted.exp/bin/%(proj)s %(sdir)s/bin' % locals())


def makeMakeBall(proj):
    def makeBall(opts):
        ver = opts['base-version']
        tdir = "Twisted-%s" % (ver,)
        projver = '0.1.0'
        projdir = 'Twisted%s-%s' % (proj.capitalize(), projver,)
        createSubprojectDirectory(proj, projver)
        sh('''
        tar cjhf %(projdir)s.tar.bz2 %(projdir)s
        ''' % locals())
    return makeBall


makeBallConch = makeMakeBall('conch')
makeBallFlow = makeMakeBall('flow')
makeBallLore = makeMakeBall('lore')
makeBallMail = makeMakeBall('mail')
makeBallNames = makeMakeBall('names')
makeBallNews = makeMakeBall('news')
makeBallPair = makeMakeBall('pair')
makeBallRunner = makeMakeBall('runner')
makeBallWeb = makeMakeBall('web')
makeBallWeb2 = makeMakeBall('web2')
makeBallWords = makeMakeBall('words')


def finalizeTag(opts):
    sh('svn mv -m "Finalizing release of %s" %s %s'
       % (opts['base-version'], opts['temptagurl'], opts['tagurl']))


def releaseBalls(opts):
    rel = opts['releasedir']
    ver = opts['base-version']
    tdir = "Twisted-%s" % ver

    if not os.path.exists(rel):
        print "Distribute: Creating", rel
        os.mkdir(rel)

    if not os.path.exists("%s/old" % rel):
        print "Distribute: creating %s/old" % rel
        os.mkdir("%s/old" % rel)

    sh('mv %(rel)s/*.tar.gz %(rel)s/*.tar.bz2 %(rel)s/old || true' % locals())

    sh('''
    cp Twisted_NoDocs-%(ver)s.tar.gz  %(rel)s &&
    cp Twisted_NoDocs-%(ver)s.tar.bz2 %(rel)s
    ''' % locals())


    sh('''
    cp TwistedDocs-%(ver)s.tar.gz  %(rel)s &&
    cp TwistedDocs-%(ver)s.tar.bz2 %(rel)s
    ''' % locals())

    sh('''
    cp %(tdir)s.tar.gz %(rel)s &&
    cp %(tdir)s.tar.bz2 %(rel)s
    ''' % locals())

def releaseSourceforge(opts):
    name = opts['sfname']
    rel = opts['releasedir']
    ver = opts['base-version']
    path = '/home/users/'+name[0]+'/'+name[:2]+'/'+name 
    sh("ssh %(name)s@shell.sf.net mkdir Twisted-%(ver)s || true" % vars())
    sh("scp -r %(rel)s/Twisted*%(ver)s* debian-%(ver)s "
       "%(name)s@shell.sf.net:%(path)s/Twisted-%(ver)s/" % vars())
    sh("echo "
       "'"
       "umask 0002&&"
       "rm -f /home/groups/t/tw/twisted/htdocs/debian/woody/Packages.gz&&"
       "rm -f /home/groups/t/tw/twisted/htdocs/debian/woody/Sources.gz&&"
       "rm -f /home/groups/t/tw/twisted/htdocs/debian/woody/override&&"
       "rm -f /home/groups/t/tw/twisted/htdocs/debian/Packages.gz&&"
       "rm -f /home/groups/t/tw/twisted/htdocs/debian/Sources.gz&&"
       "rm -f /home/groups/t/tw/twisted/htdocs/debian/override&&"
       "mv Twisted-%(ver)s/debian-%(ver)s/woody/* "
          "/home/groups/t/tw/twisted/htdocs/debian/woody/&&"
       "rmdir Twisted-%(ver)s/debian-%(ver)s/woody&&"
       "mv Twisted-%(ver)s/debian-%(ver)s/* "
          "/home/groups/t/tw/twisted/htdocs/debian/&&"
       "rmdir Twisted-%(ver)s/debian-%(ver)s&&"
       "mv Twisted-%(ver)s/* /home/groups/t/tw/twisted/htdocs&&"
       "cd /home/groups/t/tw/twisted/htdocs&&"
       "tar xzf TwistedDocs-%(ver)s.tar.gz'"
       "|ssh %(name)s@shell.sf.net newgrp twisted" % vars())


def updateWebDocs(opts):
    os.chdir(opts['docdir'])

    tdocdir = os.path.join(opts['docdir'],
                           'TwistedDocs-%s' % opts['base-version'])

    tbz2 = '%s/TwistedDocs-%s.tar.bz2' % (opts['releasedir'],
                                          opts['base-version'])
    if os.path.exists(tdocdir):
        raise DirectoryExists('%s already exists!' % tdocdir)

    sh('tar xjf %s' % tbz2)

    # lore-ize all the docs

    os.chdir('%s/howto' % tdocdir)

    template = os.path.abspath('website-template.tpl')

    lorecmd = (("lore -p --config template=%s " % template)
               + "--config baseurl="
               "http://twistedmatrix.com/documents/current/api/%s.html")
    sh("%s --config ext= *.xhtml" % lorecmd)
    os.chdir('..')
    for dir in ['examples', 'historic',
                'specifications', 'vision']:
        os.chdir(dir)
        sh('%s  --config ext= -l../howto/ *.xhtml' % lorecmd)
        os.chdir('..')

    os.chdir('man')
    sh('lore -p --config ext=.xhtml -l../howto -iman -olore *.1')
    sh('%s --config ext=-man -l ../howto *.xhtml' % lorecmd)

    os.chdir('../..') # should be in docdir now

    # 'deploy' to web

    if os.path.exists('current'):
        if os.path.islink('current'):
            os.unlink('current')
        else:
            raise Exception("'current' exists and is NOT a symlink. Won't remove.")

    os.symlink(tdocdir, 'current')


if __name__=='__main__':
    main()

