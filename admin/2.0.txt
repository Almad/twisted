=================
Twisted 2.0 Split
=================

Twisted 2.0 is a major upgrade and will involve splitting the framework
up into many packages <http://twistedmatrix.com/bugs/issue567>.  The
automated release process must be modified to work with all of these
minor packages.  At the same time, the release is being migrated to
zpkgtools, a tool developed by Fred Drake for Zope3 which facilitates
hierarchical packages such as Twisted.

In the most abstract, a tool must be provided which takes various
release-related parameters, interacts with the Subversion repository,
the code itself, a zpkg-produced tarball, distribution sites, and so
forth, and automates most necessary tasks to release each of the
Twisted projects.

Expectations
============

The end is the best place to start; later we will get to the necessary
interactions with specific systems.

When Twisted 2.0 is released, packages for Debian, Windows, and
generic UNIX machines (tarballs) must be available.  Individual
packages for each of Twisted and its subprojects must be available in
Debian and Tarball format.

The tarballs should contain a setup.py (or similar) that can handle building
and installation of the package.  It should contain documentation for the
project in HTML form for both the API and howtos.  It should install the
software necessary to import packages in twisted, and relevant executable
scripts; but not, for example, documentation.  There should be a tarball
for Twisted Core and all other Twisted subprojects, as well as a "Sumo"
tarball that directly includes Twisted and officially-branded
subpackages.

Debian should have a twisted-core package and several twisted-subproject
packages.  There will not be a twisted-sumo to correspond to the tarball
distributions; applications will depend on the parts of Twisted that they
need.  (Providing our own apt repositories will also be an issue: see
<http://twistedmatrix.com/bugs/issue160>.)

There should be a Windows executable installer for Twisted available
from the download site.  It will be analogous to the "sumo" package.
There is little benefit to dividing Twisted up for the benefit of Windows
developers, since they will undoubtedly be creating their own,
application-specific installers later and therefore cannot take
advantage of the release management benefits of the split.

Any packages for other OSes are up to the community to provide.  There will
be a formal process for contributing packages and the requirements of
packages, to hopefully discourage the existence of broken Twisted packages
that generate mailing list traffic.  Obviously we can't prevent someone from
making and distributing a package, but with standards in place we can
"bless" packages, making them more desirable to the community than
non-conforming packages.

Web Sites
=========

Twisted and each Twisted subproject should have its own web site.
Each web site should describe the project and its goals, and have
links to downloads, release notes, mailing lists, and other community
forums. Each project web site should contain documentation for that
project in online browsable form and archive download form.

Process
=======

There are three types of Twisted releases. Alpha, Release Candidate,
and Final.  Whether or not this will continue from 2.0 on is up for
discussion.

Alpha - Released from trunk@HEAD at arbitrary points when tests pass.
RC    - Released (and branched) from trunk@HEAD when a new final-release
        is wanted.
RCN   - Released from branch, only fixing bugs since the last RC.
Final - Released from RC branch, should be equivalent to the last RC.

This is how it currently goes::

  For an alpha or an rc1, start from trunk. otherwise, start from the
  last RC.
  
  Update the version number.
  Update the ChangeLog or NEWS file.
  Generate API/Howto documentation.
  Generate tarballs, Debian packages, and Windows packages.
  
  Upload the tarballs and win32 packages to a distribution site, and
  update the web site to point to the new release.
  
  Upload the Debian packages to an apt repository, maintaining one
  version of Final-only releases and one for all releases.
  
  Upload the API and Howto documentation to a web site.

This process is not necessarily how things will remain; especially
since projects will be smaller and more agile, the alpha/RC/release
cycle can probably be simplified.

Automation
==========

Interacting with all the various systems which are necessary for
automating a release can be very problematic.  The unix file system,
Subversion, ssh, Debian build tools, and web servers all require
custom code and much state.  Any automation must be able to robustly
respond to failure when interacting with each of these systems, and
should not require a restart of the entire process, as it can take a
long time. A minimal amount of state should be shared between each
step of the process and each different script, to maximize
comprehensibility and minimize the reach of bugs.

Building
========

Much attention must be paid to how the various packages are built.
Zpkg has proved to be a very useful tool for this, but it is still
early in development and will likely need impromevents.

Currently, Twisted's zpkg building does not facilitate extension
modules; either a way to generalize extension building should be
provided upstream to zpkg, or a fix specifically for Twisted should be
implemented. As well, automating a zpkg build is problematic
especially with respect to portability of environment. These issues
are currently being considered and worked on.  For reference, see 
<http://twistedmatrix.com/bugs/issue818>.

Subprojects
===========

The following projects are those which should have a higher priority
for a 2.0 release; while all subprojects should ideally have a release
at 2.0, these projects have many users and are thus more important.

Core, Web, Web2, Conch, Lore, Names, Mail, Words(?)

Each subproject will have its own release manager (though one person
may be the release manager of multiple projects), and some amount of
education and support of the release automation should be given to
them.

We will produce automation tools and documentation of what we're doing
for the subproject managers to use.

